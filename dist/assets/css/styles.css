/*! tailwindcss v4.1.4 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-red-50: oklch(97.1% 0.013 17.38);
    --color-red-100: oklch(93.6% 0.032 17.717);
    --color-red-200: oklch(88.5% 0.062 18.334);
    --color-red-400: oklch(70.4% 0.191 22.216);
    --color-red-500: oklch(63.7% 0.237 25.331);
    --color-amber-50: oklch(98.7% 0.022 95.277);
    --color-amber-500: oklch(76.9% 0.188 70.08);
    --color-yellow-500: oklch(79.5% 0.184 86.047);
    --color-green-50: oklch(98.2% 0.018 155.826);
    --color-green-500: oklch(72.3% 0.219 149.579);
    --color-sky-50: oklch(97.7% 0.013 236.62);
    --color-sky-500: oklch(68.5% 0.169 237.323);
    --color-blue-50: oklch(97% 0.014 254.604);
    --color-blue-200: oklch(88.2% 0.059 254.128);
    --color-blue-300: oklch(80.9% 0.105 251.813);
    --color-blue-400: oklch(70.7% 0.165 254.624);
    --color-blue-500: oklch(62.3% 0.214 259.815);
    --color-indigo-500: oklch(58.5% 0.233 277.117);
    --color-fuchsia-50: oklch(97.7% 0.017 320.058);
    --color-fuchsia-500: oklch(66.7% 0.295 322.15);
    --color-gray-50: oklch(98.5% 0.002 247.839);
    --color-gray-500: oklch(55.1% 0.027 264.364);
    --color-zinc-50: oklch(98.5% 0 0);
    --color-zinc-800: oklch(27.4% 0.006 286.033);
    --color-neutral-50: oklch(98.5% 0 0);
    --color-neutral-100: oklch(97% 0 0);
    --color-neutral-200: oklch(92.2% 0 0);
    --color-neutral-300: oklch(87% 0 0);
    --color-neutral-400: oklch(70.8% 0 0);
    --color-neutral-500: oklch(55.6% 0 0);
    --color-neutral-600: oklch(43.9% 0 0);
    --color-neutral-800: oklch(26.9% 0 0);
    --color-neutral-900: oklch(20.5% 0 0);
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --text-4xl: 2.25rem;
    --text-4xl--line-height: calc(2.5 / 2.25);
    --text-5xl: 3rem;
    --text-5xl--line-height: 1;
    --text-6xl: 3.75rem;
    --text-6xl--line-height: 1;
    --text-7xl: 4.5rem;
    --text-7xl--line-height: 1;
    --text-8xl: 6rem;
    --text-8xl--line-height: 1;
    --text-9xl: 8rem;
    --text-9xl--line-height: 1;
    --font-weight-thin: 100;
    --font-weight-extralight: 200;
    --font-weight-light: 300;
    --font-weight-normal: 400;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --font-weight-extrabold: 800;
    --font-weight-black: 900;
    --tracking-widest: 0.1em;
    --leading-normal: 1.5;
    --leading-relaxed: 1.625;
    --leading-loose: 2;
    --radius-xs: 0.125rem;
    --radius-sm: 0.25rem;
    --radius-md: 0.375rem;
    --radius-lg: 0.5rem;
    --radius-xl: 0.75rem;
    --shadow-xs: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-sm: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
    --tt-sidebar-max-w: calc(var(--spacing) * 64);
    --tt-sidebar-min-w: calc(var(--spacing) * 16);
    --color-base-subtle: var(--color-neutral-400);
    --color-base-content: var(--color-neutral-800);
    --color-neutral: var(--color-zinc-800);
    --color-neutral-content: var(--color-zinc-50);
    --color-primary: var(--color-blue-500);
    --color-primary-content: var(--color-blue-50);
    --color-secondary: var(--color-gray-500);
    --color-secondary-content: var(--color-gray-50);
    --color-accent: var(--color-fuchsia-500);
    --color-accent-content: var(--color-fuchsia-50);
    --color-info: var(--color-sky-500);
    --color-info-content: var(--color-sky-50);
    --color-success: var(--color-green-500);
    --color-success-content: var(--color-green-50);
    --color-warning: var(--color-amber-500);
    --color-warning-content: var(--color-amber-50);
    --color-danger: var(--color-red-500);
    --color-danger-content: var(--color-red-50);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .col-span-2 {
    grid-column: span 2 / span 2;
  }
  .col-start-1 {
    grid-column-start: 1;
  }
  .col-start-3 {
    grid-column-start: 3;
  }
  .row-start-1 {
    grid-row-start: 1;
  }
  .m-4 {
    margin: calc(var(--spacing) * 4);
  }
  .mx-4 {
    margin-inline: calc(var(--spacing) * 4);
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline {
    display: inline;
  }
  .table {
    display: table;
  }
  .size-4 {
    width: calc(var(--spacing) * 4);
    height: calc(var(--spacing) * 4);
  }
  .size-6 {
    width: calc(var(--spacing) * 6);
    height: calc(var(--spacing) * 6);
  }
  .h-12 {
    height: calc(var(--spacing) * 12);
  }
  .h-16 {
    height: calc(var(--spacing) * 16);
  }
  .h-64 {
    height: calc(var(--spacing) * 64);
  }
  .h-screen {
    height: 100vh;
  }
  .min-h-48 {
    min-height: calc(var(--spacing) * 48);
  }
  .min-h-screen {
    min-height: 100vh;
  }
  .w-3\/12 {
    width: calc(3/12 * 100%);
  }
  .w-20 {
    width: calc(var(--spacing) * 20);
  }
  .w-72 {
    width: calc(var(--spacing) * 72);
  }
  .w-full {
    width: 100%;
  }
  .min-w-9 {
    min-width: calc(var(--spacing) * 9);
  }
  .grow {
    flex-grow: 1;
  }
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  .grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
  .grid-cols-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
  .grid-cols-6 {
    grid-template-columns: repeat(6, minmax(0, 1fr));
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-row {
    flex-direction: row;
  }
  .items-center {
    align-items: center;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-end {
    justify-content: flex-end;
  }
  .justify-items-center {
    justify-items: center;
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  .gap-4 {
    gap: calc(var(--spacing) * 4);
  }
  .gap-8 {
    gap: calc(var(--spacing) * 8);
  }
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .overflow-hidden {
    overflow: hidden;
  }
  .overflow-x-auto {
    overflow-x: auto;
  }
  .rounded {
    border-radius: 0.25rem;
  }
  .rounded-xl {
    border-radius: var(--radius-xl);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .border-t {
    border-top-style: var(--tw-border-style);
    border-top-width: 1px;
  }
  .border-r {
    border-right-style: var(--tw-border-style);
    border-right-width: 1px;
  }
  .border-b {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }
  .border-neutral-200 {
    border-color: var(--color-neutral-200);
  }
  .bg-accent {
    background-color: var(--color-accent);
  }
  .bg-danger {
    background-color: var(--color-danger);
  }
  .bg-info {
    background-color: var(--color-info);
  }
  .bg-neutral {
    background-color: var(--color-neutral);
  }
  .bg-neutral-100 {
    background-color: var(--color-neutral-100);
  }
  .bg-primary {
    background-color: var(--color-primary);
  }
  .bg-secondary {
    background-color: var(--color-secondary);
  }
  .bg-success {
    background-color: var(--color-success);
  }
  .bg-warning {
    background-color: var(--color-warning);
  }
  .bg-white {
    background-color: var(--color-white);
  }
  .p-5 {
    padding: calc(var(--spacing) * 5);
  }
  .p-10 {
    padding: calc(var(--spacing) * 10);
  }
  .py-4 {
    padding-block: calc(var(--spacing) * 4);
  }
  .ps-0 {
    padding-inline-start: calc(var(--spacing) * 0);
  }
  .text-center {
    text-align: center;
  }
  .text-justify {
    text-align: justify;
  }
  .text-left {
    text-align: left;
  }
  .text-right {
    text-align: right;
  }
  .indent-10 {
    text-indent: calc(var(--spacing) * 10);
  }
  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }
  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }
  .text-4xl {
    font-size: var(--text-4xl);
    line-height: var(--tw-leading, var(--text-4xl--line-height));
  }
  .text-5xl {
    font-size: var(--text-5xl);
    line-height: var(--tw-leading, var(--text-5xl--line-height));
  }
  .text-6xl {
    font-size: var(--text-6xl);
    line-height: var(--tw-leading, var(--text-6xl--line-height));
  }
  .text-7xl {
    font-size: var(--text-7xl);
    line-height: var(--tw-leading, var(--text-7xl--line-height));
  }
  .text-8xl {
    font-size: var(--text-8xl);
    line-height: var(--tw-leading, var(--text-8xl--line-height));
  }
  .text-9xl {
    font-size: var(--text-9xl);
    line-height: var(--tw-leading, var(--text-9xl--line-height));
  }
  .text-base {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .leading-loose {
    --tw-leading: var(--leading-loose);
    line-height: var(--leading-loose);
  }
  .leading-none {
    --tw-leading: 1;
    line-height: 1;
  }
  .leading-normal {
    --tw-leading: var(--leading-normal);
    line-height: var(--leading-normal);
  }
  .font-black {
    --tw-font-weight: var(--font-weight-black);
    font-weight: var(--font-weight-black);
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-extrabold {
    --tw-font-weight: var(--font-weight-extrabold);
    font-weight: var(--font-weight-extrabold);
  }
  .font-extralight {
    --tw-font-weight: var(--font-weight-extralight);
    font-weight: var(--font-weight-extralight);
  }
  .font-light {
    --tw-font-weight: var(--font-weight-light);
    font-weight: var(--font-weight-light);
  }
  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .font-normal {
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .font-thin {
    --tw-font-weight: var(--font-weight-thin);
    font-weight: var(--font-weight-thin);
  }
  .tracking-widest {
    --tw-tracking: var(--tracking-widest);
    letter-spacing: var(--tracking-widest);
  }
  .text-nowrap {
    text-wrap: nowrap;
  }
  .text-wrap {
    text-wrap: wrap;
  }
  .text-accent {
    color: var(--color-accent);
  }
  .text-accent-content {
    color: var(--color-accent-content);
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-danger {
    color: var(--color-danger);
  }
  .text-danger-content {
    color: var(--color-danger-content);
  }
  .text-info {
    color: var(--color-info);
  }
  .text-info-content {
    color: var(--color-info-content);
  }
  .text-neutral {
    color: var(--color-neutral);
  }
  .text-neutral-400 {
    color: var(--color-neutral-400);
  }
  .text-neutral-content {
    color: var(--color-neutral-content);
  }
  .text-primary {
    color: var(--color-primary);
  }
  .text-primary-content {
    color: var(--color-primary-content);
  }
  .text-secondary {
    color: var(--color-secondary);
  }
  .text-secondary-content {
    color: var(--color-secondary-content);
  }
  .text-success {
    color: var(--color-success);
  }
  .text-success-content {
    color: var(--color-success-content);
  }
  .text-warning {
    color: var(--color-warning);
  }
  .text-warning-content {
    color: var(--color-warning-content);
  }
  .capitalize {
    text-transform: capitalize;
  }
  .lowercase {
    text-transform: lowercase;
  }
  .uppercase {
    text-transform: uppercase;
  }
  .italic {
    font-style: italic;
  }
  .not-italic {
    font-style: normal;
  }
  .font-stretch-condensed {
    font-stretch: condensed;
  }
  .font-stretch-expanded {
    font-stretch: expanded;
  }
  .font-stretch-extra-condensed {
    font-stretch: extra-condensed;
  }
  .font-stretch-extra-expanded {
    font-stretch: extra-expanded;
  }
  .font-stretch-normal {
    font-stretch: normal;
  }
  .line-through {
    text-decoration-line: line-through;
  }
  .no-underline {
    text-decoration-line: none;
  }
  .overline {
    text-decoration-line: overline;
  }
  .underline {
    text-decoration-line: underline;
  }
  .decoration-danger {
    text-decoration-color: var(--color-danger);
  }
  .decoration-primary {
    text-decoration-color: var(--color-primary);
  }
  .decoration-dashed {
    text-decoration-style: dashed;
  }
  .decoration-dotted {
    text-decoration-style: dotted;
  }
  .decoration-double {
    text-decoration-style: double;
  }
  .decoration-solid {
    text-decoration-style: solid;
  }
  .decoration-wavy {
    text-decoration-style: wavy;
  }
  .decoration-2 {
    text-decoration-thickness: 2px;
  }
  .decoration-4 {
    text-decoration-thickness: 4px;
  }
  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .divider-1 {
    --divider-width: 1px;
  }
  .divider-2 {
    --divider-width: 2px;
  }
  .divider-3 {
    --divider-width: 3px;
  }
  .divider-4 {
    --divider-width: 4px;
  }
  .divider-end-5 {
    --divider-end: calc(var(--spacing) * 5);
  }
  .divider-end-20 {
    --divider-end: calc(var(--spacing) * 20);
  }
  .divider-end-40 {
    --divider-end: calc(var(--spacing) * 40);
  }
  .divider-end-80 {
    --divider-end: calc(var(--spacing) * 80);
  }
  .divider-end-160 {
    --divider-end: calc(var(--spacing) * 160);
  }
  .divider-end-\[10px\] {
    --divider-end: 10px;
  }
  .divider-end-\[20\%\] {
    --divider-end: 20%;
  }
  .divider-end-\[20px\] {
    --divider-end: 20px;
  }
  .divider-end-\[50em\] {
    --divider-end: 50em;
  }
  .divider-start-0 {
    --divider-start: calc(var(--spacing) * 0);
  }
  .divider-start-1 {
    --divider-start: calc(var(--spacing) * 1);
  }
  .divider-start-5 {
    --divider-start: calc(var(--spacing) * 5);
  }
  .divider-start-20 {
    --divider-start: calc(var(--spacing) * 20);
  }
  .divider-start-40 {
    --divider-start: calc(var(--spacing) * 40);
  }
  .divider-start-60 {
    --divider-start: calc(var(--spacing) * 60);
  }
  .divider-start-120 {
    --divider-start: calc(var(--spacing) * 120);
  }
  .divider-start-\[10px\] {
    --divider-start: 10px;
  }
  .divider-start-\[20\%\] {
    --divider-start: 20%;
  }
  .divider-start-\[50em\] {
    --divider-start: 50em;
  }
}
@layer theme, base, components, utilities;
@layer theme;
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities;
@layer base {
  dialog {
    margin: auto;
  }
}
@layer base {
  h1, .h1 {
    font-size: var(--text-5xl);
    line-height: calc(var(--spacing) * 16);
  }
  h2, .h2 {
    font-size: var(--text-4xl);
    line-height: calc(var(--spacing) * 14);
  }
  h3, .h3 {
    font-size: var(--text-3xl);
    line-height: calc(var(--spacing) * 12);
  }
  h4, .h4 {
    font-size: var(--text-2xl);
    line-height: calc(var(--spacing) * 10);
  }
  h5, .h5 {
    font-size: var(--text-xl);
    line-height: calc(var(--spacing) * 8);
  }
  h6, .h6 {
    font-size: var(--text-lg);
    line-height: calc(var(--spacing) * 6);
  }
  blockquote, .blockquote {
    padding-inline-start: calc(var(--spacing) * 12);
    & > p {
      --tw-leading: var(--leading-relaxed);
      line-height: var(--leading-relaxed);
    }
    & > .blockquote-footer::before {
      --tw-content: "— ";
      content: var(--tw-content);
    }
  }
  ul.list-styled {
    list-style-type: disc;
    padding-inline: calc(var(--spacing) * 6);
  }
  ol.list-styled {
    list-style-type: decimal;
    padding-inline: calc(var(--spacing) * 6);
  }
  code, kbd, samp, var, pre {
    height: fit-content;
    width: fit-content;
    border-radius: var(--radius-md);
    border-style: var(--tw-border-style);
    border-width: 1px;
    background-color: var(--color-base-subtle);
    padding-inline: calc(var(--spacing) * 1);
    padding-block: calc(var(--spacing) * 0.5);
  }
  mark {
    background-color: var(--color-info);
    color: var(--color-info-content);
  }
}
i.hi {
  display: inline-block;
  width: calc(var(--spacing) * 6);
  height: calc(var(--spacing) * 6);
  &::before {
    display: inline-block;
    width: 100%;
    height: 100%;
    background-color: currentcolor;
    vertical-align: text-bottom;
    --tw-content: '';
    content: var(--tw-content);
    mask-image: var(--svg);
    mask-repeat: no-repeat;
  }
  --svg: none;
}
i.hi-arrow-path {
  --svg: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6"><path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99" /></svg>');
}
i.hi-chat-bubble-bottom-center-text {
  --svg: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6"><path stroke-linecap="round" stroke-linejoin="round" d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 0 1 .865-.501 48.172 48.172 0 0 0 3.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z" /></svg>');
}
i.hi-exclamation-circle {
  --svg: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m9-.75a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 3.75h.008v.008H12v-.008Z" /></svg>');
}
i.hi-exclamation-triangle {
  --svg: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z" /></svg>');
}
i.hi-folder {
  --svg: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6"><path stroke-linecap="round" stroke-linejoin="round" d="M2.25 12.75V12A2.25 2.25 0 0 1 4.5 9.75h15A2.25 2.25 0 0 1 21.75 12v.75m-8.69-6.44-2.12-2.12a1.5 1.5 0 0 0-1.061-.44H4.5A2.25 2.25 0 0 0 2.25 6v12a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9a2.25 2.25 0 0 0-2.25-2.25h-5.379a1.5 1.5 0 0 1-1.06-.44Z" /></svg>');
}
i.hi-folder-open {
  --svg: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 9.776c.112-.017.227-.026.344-.026h15.812c.117 0 .232.009.344.026m-16.5 0a2.25 2.25 0 0 0-1.883 2.542l.857 6a2.25 2.25 0 0 0 2.227 1.932H19.05a2.25 2.25 0 0 0 2.227-1.932l.857-6a2.25 2.25 0 0 0-1.883-2.542m-16.5 0V6A2.25 2.25 0 0 1 6 3.75h3.879a1.5 1.5 0 0 1 1.06.44l2.122 2.12a1.5 1.5 0 0 0 1.06.44H18A2.25 2.25 0 0 1 20.25 9v.776" /></svg>');
}
i.hi-home {
  --svg: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6"><path stroke-linecap="round" stroke-linejoin="round" d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25" /></svg>');
}
i.hi-x-mark {
  --svg: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" /></svg>');
}
i.hi-sm {
  width: calc(var(--spacing) * 4);
  height: calc(var(--spacing) * 4);
}
i.hi-lg {
  width: calc(var(--spacing) * 8);
  height: calc(var(--spacing) * 8);
}
@layer components;
@layer components {
  main {
    flex: 1;
    padding: calc(var(--spacing) * 4);
  }
}
@layer components {
  aside.sidebar {
    container-type: inline-size;
    container-name: sidebar;
    position: fixed;
    display: flex;
    z-index: 10;
    flex-direction: column;
    flex: auto 0 0;
    height: 100vh;
    width: var(--tt-sidebar-width);
    max-width: var(--tt-sidebar-max-w);
    min-width: var(--tt-sidebar-min-w);
    background-color: var(--color-neutral-100);
    border-right: 1px solid var(--color-neutral-200);
    color: var(--color-neutral-600);
    transition-property: width;
    transition-duration: var(--tt-duration, var(--default-transition-duration));
    transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    --tt-sidebar-width: var(--tt-sidebar-max-w);
    + div {
      padding-inline-start: var(--tt-sidebar-max-w);
    }
    &:has(.sidebar-toggle input:checked) {
      --tt-sidebar-width: var(--tt-sidebar-min-w);
      + div {
        padding-inline-start: var(--tt-sidebar-min-w);
      }
      &:hover {
        --tt-sidebar-width: var(--tt-sidebar-max-w);
      }
    }
    --tt-sidebar-max-w: calc(var(--spacing) * 64);
    --tt-sidebar-min-w: calc(var(--spacing) * 16);
    --tt-duration: 200ms;
    --tt-ease-out: ease-out;
    .sidebar-header {
      display: flex;
      flex-wrap: nowrap;
      gap: calc(var(--spacing) * 2);
      align-items: center;
      overflow: hidden;
      min-height: calc(var(--spacing) * 16);
      padding-inline: calc(var(--spacing) * 4);
      border-bottom: 1px solid var(--color-neutral-200);
      background-color: var(--color-neutral-50);
      .sidebar-logo {
        width: calc(var(--spacing) * 8);
        height: calc(var(--spacing) * 8);
        min-width: calc(var(--spacing) * 8);
        min-height: calc(var(--spacing) * 8);
        padding: calc(var(--spacing) * 1);
        background-color: var(--color-white);
        border: 1px solid var(--color-neutral-300);
        border-radius: var(--radius-sm);
        text-align: center;
      }
      .sidebar-title {
        flex-grow: 1;
        overflow: hidden;
        font-weight: var(--font-weight-medium);
      }
      .sidebar-toggle {
        margin-inline-start: calc(var(--spacing) * 2);
        overflow: hidden;
        input[type='checkbox'] {
          display: none;
          &:checked ~ svg {
            rotate: 180deg;
          }
        }
        svg {
          transition-property: rotate;
          transition-duration: var(--tt-duration, var(--default-transition-duration));
          transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
        }
      }
    }
    .sidebar-content {
      display: flex;
      flex-direction: column;
      flex: 1;
      overflow-y: scroll;
      scrollbar-color: var(--color-neutral-300) var(--color-neutral-100);
      padding-inline-start: calc(var(--spacing) * 4);
      @container sidebar (width < 8rem) {
        overflow-y: hidden;
        padding-inline-end: calc(var(--spacing) * 4);
        .divider {
          gap: 0;
          * {
            display: none;
          }
        }
        .menu > ul ul {
          height: 0 !important;
        }
      }
      .menu:has(+ .menu-bottom) {
        flex: 1;
      }
    }
    .sidebar-footer {
      position: sticky;
      bottom: 0;
      padding: calc(var(--spacing) * 4);
      background-color: var(--color-neutral-50);
      border-top: 1px solid var(--color-neutral-200);
      box-shadow: var(--shadow);
    }
  }
}
@layer components {
  .page {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    background-color: var(--color-neutral-100);
  }
}
@layer components {
  .topbar {
    display: flex;
    align-items: center;
    min-height: calc(var(--spacing) * 16);
    padding-inline: calc(var(--spacing) * 4);
    color: var(--color-neutral-600);
    background-color: var(--color-neutral-50);
    border-bottom: 1px solid var(--color-neutral-200);
  }
}
@layer components {
  .accordion {
    @media (prefers-reduced-motion: no-preference) {
      interpolate-size: allow-keywords;
    }
    border: 1px solid var(--color-neutral-200);
    border-radius: var(--radius-sm);
    summary {
      display: flex;
      justify-content: space-between;
      cursor: pointer;
      padding-inline: calc(var(--spacing) * 4);
      padding-block: calc(var(--spacing) * 4);
    }
    summary::marker {
      content: "";
    }
    summary::after {
      content: "";
      mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" /></svg>');
      mask-repeat: no-repeat;
      mask-type: alpha;
      background-color: currentColor;
      color: var(--color-neutral-500);
      inline-size: calc(var(--spacing) * 5);
      transition-property: rotate;
      transition-duration: var(--tt-duration, var(--default-transition-duration));
      transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    }
    &[open] {
      summary::after {
        rotate: 180deg;
      }
      &::details-content {
        opacity: 1;
        block-size: auto;
        padding-block-end: calc(var(--spacing) * 4);
      }
    }
    &::details-content {
      opacity: 0;
      block-size: 0;
      overflow-y: clip;
      padding-inline: calc(var(--spacing) * 4);
      color: var(--color-neutral-500);
      transition-property: block-size, content-visibility, opacity, padding-block;
      transition-duration: var(--tt-duration, var(--default-transition-duration));
      transition-behavior: allow-discrete;
      transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    }
  }
}
@layer components {
  .alert {
    display: grid;
    grid-auto-flow: column;
    grid-template-columns: auto 1fr;
    align-items: center;
    gap: calc(var(--spacing) * 2);
    border-radius: 0.25rem;
    border-style: var(--tw-border-style);
    border-width: 1px;
    border-color: var(--alert-border);
    background-color: var(--alert-bg);
    padding-inline: calc(var(--spacing) * 4);
    padding-block: calc(var(--spacing) * 4);
    color: var(--alert-fg);
    --tw-shadow: inset 0 1px var(--tw-shadow-color, color-mix(in srgb, #fff 10%, transparent)), 0 2px 2px var(--tw-shadow-color, color-mix(in srgb, #000 5%, transparent));
    @supports (color: color-mix(in lab, red, red)) {
      --tw-shadow: inset 0 1px var(--tw-shadow-color, color-mix(in oklab, var(--color-white) 10%, transparent)), 0 2px 2px var(--tw-shadow-color, color-mix(in oklab, var(--color-black) 5%, transparent));
    }
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --alert-border: var(--alert-color);
    @supports (color: color-mix(in lab, red, red)) {
      --alert-border: color-mix(in oklab,var(--alert-color),white 15%);
    }
    --alert-bg: var(--alert-color);
    --alert-color: var(--color-neutral-300);
    --alert-fg: var(--color-base-content);
    i {
      color: var(--alert-fg);
    }
  }
  .alert-sm {
    padding-block: calc(var(--spacing) * 2);
  }
  .alert-lg {
    padding-block: calc(var(--spacing) * 6);
  }
  .alert-xl {
    padding-block: calc(var(--spacing) * 8);
  }
  .alert-neutral {
    --alert-color: var(--color-neutral);
    --alert-fg: var(--color-neutral-content);
  }
  .alert-primary {
    --alert-color: var(--color-primary);
    --alert-fg: var(--color-primary-content);
  }
  .alert-secondary {
    --alert-color: var(--color-secondary);
    --alert-fg: var(--color-secondary-content);
  }
  .alert-info {
    --alert-color: var(--color-info);
    --alert-fg: var(--color-info-content);
  }
  .alert-accent {
    --alert-color: var(--color-accent);
    --alert-fg: var(--color-accent-content);
  }
  .alert-success {
    --alert-color: var(--color-success);
    --alert-fg: var(--color-success-content);
  }
  .alert-warning {
    --alert-color: var(--color-warning);
    --alert-fg: var(--color-warning-content);
  }
  .alert-danger {
    --alert-color: var(--color-danger);
    --alert-fg: var(--color-danger-content);
  }
  .alert-soft {
    --alert-bg: var(--alert-color);
    @supports (color: color-mix(in lab, red, red)) {
      --alert-bg: color-mix(in oklab,var(--alert-color), white 90%);
    }
    --alert-fg: var(--alert-color);
  }
  .alert-outline {
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --alert-bg: transparent;
    --alert-fg: var(--alert-color);
  }
  .alert-outline-dashed {
    --tw-border-style: dashed;
    border-style: dashed;
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --alert-bg: var(--alert-color);
    @supports (color: color-mix(in lab, red, red)) {
      --alert-bg: color-mix(in oklab,var(--alert-color), white 90%);
    }
    --alert-fg: var(--alert-color);
  }
  .alert-outline-dotted {
    --tw-border-style: dotted;
    border-style: dotted;
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --alert-bg: var(--alert-color);
    @supports (color: color-mix(in lab, red, red)) {
      --alert-bg: color-mix(in oklab,var(--alert-color), white 90%);
    }
    --alert-fg: var(--alert-color);
  }
}
@layer components {
  .avatar {
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    width: var(--av-size);
    height: var(--av-size);
    min-width: var(--av-size);
    min-height: var(--av-size);
    text-align: center;
    font-size: var(--text-sm);
    line-height: var(--leading-relaxed);
    background-color: var(--color-neutral-200);
    border: 2px solid var(--color-neutral-50);
    border-radius: calc(infinity * 1px);
    box-shadow: var(--tt-ring-shadow), var(--shadow-sm);
    --tt-ring-shadow: 0 0 0 1px var(--color-neutral-300, currentColor);
    --av-size: calc(var(--spacing) * 6.5);
  }
}
@layer components {
  .badge {
    display: inline-flex;
    align-items: center;
    gap: calc(var(--spacing) * 2);
    block-size: var(--badge-size);
    padding-inline: calc(var(--spacing) * 2);
    border: 1px solid var(--badge-border);
    border-radius: var(--radius-sm);
    background-color: var(--badge-bg);
    color: var(--badge-fg);
    --badge-size: calc(var(--spacing) * 7);
    --badge-border: color-mix(in srgb, #000 15%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      --badge-border: color-mix(in oklab, var(--color-black) 15%, transparent);
    }
    --badge-bg: var(--color-neutral-100);
    --badge-fg: var(--color-neutral-600);
  }
  .badge-solid {
    border: none;
  }
  .badge-outline, .badge-outline-bold {
    --badge-border: var(--color-neutral-400);
    background: none;
  }
  .badge-outline-bold {
    border-width: 2px;
  }
  .badge-dashed {
    --badge-border: var(--color-neutral-400);
    border-style: dashed;
  }
  .badge-circle {
    border-radius: calc(infinity * 1px);
    padding-inline: calc(var(--spacing) * 3);
  }
  .badge-status {
    block-size: calc(var(--badge-size) / 2.5);
    inline-size: calc(var(--badge-size) / 2.5);
    border-radius: var(--radius-xs);
    background-color: var(--color-neutral-400);
  }
  .badge-xs {
    --badge-size: calc(var(--spacing) * 5);
    font-size: var(--text-xs);
    line-height: var(--text-xs--line-height);
  }
  .badge-sm {
    --badge-size: calc(var(--spacing) * 6);
    font-size: var(--text-sm);
    line-height: var(--text-sm--line-height);
  }
  .badge-lg {
    --badge-size: calc(var(--spacing) * 8);
    font-size: var(--text-lg);
    line-height: var(--text-lg--line-height);
  }
  .badge-xl {
    --badge-size: calc(var(--spacing) * 9);
    font-size: var(--text-xl);
    line-height: var(--text-xl--line-height);
  }
}
@layer components {
  .breadcrumb {
    ol {
      display: inline-flex;
      li {
        margin-inline: calc(var(--spacing) * 2);
      }
    }
  }
}
@layer components {
  .btn {
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: calc(var(--spacing) * 2);
    block-size: var(--btn-min-size);
    min-inline-size: var(--btn-min-size);
    padding-inline: calc(var(--spacing) * 2);
    padding-block: calc(var(--spacing) * 1);
    overflow: hidden;
    text-wrap: nowrap;
    text-decoration: none;
    background-color: var(--btn-bg);
    color: var(--btn-fg);
    &:hover {
      color: var(--btn-fg);
      background-color: var(--btn-hover);
    }
    &:focus-visible {
      background-color: var(--btn-focus);
    }
    &:active {
      background-color: var(--btn-active);
    }
    &:has(input:checked):not(:hover) {
      background-color: var(--btn-highlight);
    }
    --btn-bg: var(--color-neutral-100);
    --btn-fg: var(--color-neutral-600);
    --btn-border: none;
    --btn-hover: var(--color-neutral-200);
    --btn-focus: var(--color-neutral-200);
    --btn-active: var(--color-neutral-300);
    --btn-highlight: var(--color-white);
    --btn-min-size: calc(var(--spacing) * 9);
  }
  .btn-icon {
    border: 2px solid var(--color-neutral-50);
    box-shadow: var(--tt-ring-shadow), var(--shadow-sm);
    padding-inline: 0;
    --tt-ring-shadow: 0 0 0 1px var(--color-neutral-300, currentColor);
  }
  .btn-block {
    display: flex;
  }
  .btn-clear {
    --btn-bg: none;
  }
  .btn-rounded {
    border-radius: var(--radius-sm);
  }
  .btn-white {
    border: 1px solid var(--color-neutral-200);
    box-shadow: var(--shadow-xs);
    --btn-bg: var(--color-white);
    --btn-hover: var(--color-white);
    --btn-focus: var(--color-white);
    --btn-active: var(--color-white);
  }
  .btn-sm {
    --btn-min-size: calc(var(--spacing) * 7);
  }
  svg, img, i {
    .btn & {
      block-size: 1.25em;
      min-inline-size: 1.25em;
    }
  }
}
@layer components {
  .card {
    box-shadow: var(--shadow-xs);
    border-radius: var(--card-radius);
    width: 100%;
    background-color: var(--card-bg);
    --card-bg: var(--color-white);
    --card-header-bg: var(--color-white);
    --card-footer-bg: var(--color-white);
    --card-radius: var(--radius-sm);
    --card-header-block: calc(var(--spacing) * 14);
    --card-footer-block: calc(var(--spacing) * 16);
    &.card-border {
      border: 1px solid var(--color-neutral-200);
    }
    &.card-gutter {
      margin-block-end: calc(var(--spacing) * 8);
    }
    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      min-block-size: var(--card-header-block);
      padding-block: calc(var(--spacing) * 4);
      padding-inline: calc(var(--spacing) * 6);
      border-bottom: 1px solid var(--color-neutral-200);
      background-color: var(--card-header-bg);
      &.card-sticky {
        position: sticky;
        inset-block-start: 0;
        z-index: 10;
      }
      .card-title {
        display: flex;
        align-items: baseline;
        gap: calc(var(--spacing) * 2);
      }
      .card-toolbar {
        display: flex;
        justify-content: end;
        gap: calc(var(--spacing) * 2);
      }
      small {
        font-size: var(--text-sm);
        line-height: var(--text-sm--line-height);
        color: var(--color-base-subtle);
      }
    }
    .card-figure {
      border-start-start-radius: var(--card-radius);
      border-start-end-radius: var(--card-radius);
      overflow: hidden;
    }
    .card-body {
      padding-block-start: calc(var(--spacing) * 4);
      padding-block-end: calc(var(--spacing) * 8);
      padding-inline: calc(var(--spacing) * 6);
    }
    .card-actions {
      display: flex;
      flex-wrap: wrap;
      gap: calc(var(--spacing) * 3);
    }
    .card-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
      min-block-size: var(--card-footer-block);
      padding-block: calc(var(--spacing) * 4);
      padding-inline: calc(var(--spacing) * 6);
      border-top: 1px solid var(--color-neutral-200);
      background-color: var(--card-footer-bg);
      &.card-sticky {
        position: sticky;
        inset-block-end: 0;
        z-index: 10;
      }
    }
    .alert {
      border-radius: 0;
      box-shadow: none;
    }
  }
  .card-group {
    display: flex;
    .card:is(:first-child) {
      border-start-end-radius: 0;
      border-end-end-radius: 0;
    }
    .card:is(:last-child) {
      border-start-start-radius: 0;
      border-end-start-radius: 0;
    }
    .card:is(:not(:first-child,:last-child)) {
      border-radius: 0;
    }
  }
}
@layer components {
  .checkbox {
    appearance: none;
    cursor: pointer;
    block-size: var(--checkbox-size);
    min-inline-size: var(--checkbox-size);
    border: 1px solid var(--checkbox-border);
    border-radius: var(--radius-sm);
    outline: 0px solid var(--checkbox-focus-outline);
    outline-offset: 0px;
    background-color: var(--checkbox-bg);
    box-shadow: var(--shadow-xs);
    transition-property: border-color, background-color;
    transition-duration: var(--tt-duration, var(--default-transition-duration));
    transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    --checkbox-size: calc(var(--spacing) * 4.5);
    --checkbox-bg: var(--color-neutral-50);
    --checkbox-hover-bg: var(--color-neutral-100);
    --checkbox-active-bg: var(--color-neutral-200);
    --checkbox-border: color-mix(in srgb, #000 15%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      --checkbox-border: color-mix(in oklab, var(--color-black) 15%, transparent);
    }
    --checkbox-focus-outline: var(--color-blue-200);
    --checkbox-focus-border: var(--color-blue-400);
    --checkbox-checked: var(--color-white);
    --checkbox-checked-bg: var(--color-blue-400);
    --checkbox-disabled-bg: var(--color-neutral-200);
    --checkbox-disabled-checked: var(--color-neutral-100);
    --checkbox-disabled-checked-bg: var(--color-neutral-300);
    --checkbox-invalid-bg: var(--color-red-50);
    --checkbox-invalid-border: var(--color-red-400);
    --checkbox-outline-border: var(--color-neutral-300);
    --checkbox-outline-hover-border: var(--color-neutral-400);
    --checkbox-outline-active-border: var(--color-neutral-500);
    --checkbox-outline-checked: var(--color-blue-400);
    --checkbox-outline-disabled: var(--color-neutral-200);
    --checkbox-solid-bg: var(--color-neutral-100);
    --checkbox-solid-hover-bg: var(--color-neutral-200);
    --checkbox-solid-active-bg: var(--color-neutral-300);
    &:hover {
      --checkbox-bg: var(--checkbox-hover-bg);
    }
    &:active {
      --checkbox-bg: var(--checkbox-active-bg);
    }
    &::before {
      content: "";
      clip-path: polygon(90% 26%, 41% 90%, 10% 54%, 21% 42%, 40% 65%, 79% 15%);
      opacity: 0;
      display: block;
      block-size: 100%;
      inline-size: 100%;
      background-color: var(--checkbox-checked);
      transition-property: opacity;
      transition-duration: var(--tt-duration, var(--default-transition-duration));
      transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    }
    &:indeterminate {
      &::before {
        clip-path: polygon(10% 40%, 90% 40%, 90% 60%, 10% 60%);
      }
    }
    &:checked, &:indeterminate {
      background-color: var(--checkbox-checked-bg);
      &::before {
        opacity: 1;
      }
    }
    &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      background-color: var(--checkbox-disabled-bg);
      box-shadow: none;
      &:checked {
        background-color: var(--checkbox-disabled-checked-bg);
        &::before {
          background-color: var(--checkbox-disabled-checked);
        }
      }
      label:has(&) {
        color: var(--label-disabled);
      }
    }
    &:focus-visible {
      outline-width: 2px;
      border-color: var(--checkbox-focus-border);
    }
    &.checkbox-validate:invalid, &.checkbox-invalid:not(:checked) {
      border: 1px solid var(--checkbox-invalid-border);
      background-color: var(--checkbox-invalid-bg);
    }
    label:has(&) {
      cursor: pointer;
      display: inline-flex;
      align-items: start;
      justify-content: start;
      gap: calc(var(--spacing) * 2);
      line-height: var(--text-3xl--line-height);
    }
  }
  .checkbox-inline {
    display: flex;
    flex-direction: row;
    gap: calc(var(--spacing) * 4);
  }
  .checkbox-list {
    display: flex;
    flex-direction: column;
    gap: calc(var(--spacing) * 2);
  }
  .checkbox-outline, .checkbox-outline-bold {
    border-color: var(--checkbox-outline-border);
    box-shadow: none;
    background: none;
    &:hover {
      border-color: var(--checkbox-outline-hover-border);
    }
    &:active {
      border-color: var(--checkbox-outline-active-border);
    }
    &:is(:disabled, [disabled]) {
      border-color: var(--checkbox-outline-disabled);
      background: none;
      &:checked, &:indeterminate {
        border-color: var(--checkbox-outline-disabled);
        background: none;
        &::before {
          background-color: var(--checkbox-outline-disabled);
        }
      }
    }
    &:checked, &:indeterminate {
      border-color: var(--checkbox-outline-checked);
      background: none;
      &::before {
        background-color: var(--checkbox-outline-checked);
      }
    }
  }
  .checkbox-outline-bold {
    border-width: 2px;
  }
  .checkbox-solid {
    padding: calc(var(--spacing) * 0.25);
    border: none;
    box-shadow: none;
    --checkbox-bg: var(--checkbox-solid-bg);
    &:hover {
      --checkbox-bg: var(--checkbox-solid-hover-bg);
    }
    &:active {
      --checkbox-bg: var(--checkbox-solid-active-bg);
    }
  }
  .checkbox-xs {
    --checkbox-size: calc(var(--spacing) * 3.5);
  }
  .checkbox-sm {
    --checkbox-size: calc(var(--spacing) * 4);
  }
  .checkbox-lg {
    --checkbox-size: calc(var(--spacing) * 6);
  }
  .checkbox-xl {
    --checkbox-size: calc(var(--spacing) * 7);
  }
}
@layer components {
  .counter {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    block-size: var(--counter-size);
    inline-size: var(--counter-size);
    border-radius: var(--radius-sm);
    background-color: var(--counter-bg);
    color: var(--counter-fg);
    font-size: var(--counter-font-size);
    font-weight: var(--font-weight-medium);
    line-height: var(--counter-line-height);
    --counter-size: calc(var(--spacing) * 7);
    --counter-font-size: var(--text-xs);
    --counter-line-height: var(--text-xs--line-height);
    --counter-bg: var(--color-neutral-400);
    --counter-fg: var(--color-neutral-100);
  }
}
@layer components {
  .divider {
    display: flex;
    flex-direction: row;
    align-items: center;
    white-space: nowrap;
    &::before, &::after {
      height: calc(var(--spacing) * 0.25);
      width: 100%;
      border-bottom-style: var(--tw-border-style);
      border-bottom-width: var(--divider-width);
      border-color: var(--divider-border);
      --tw-content: '';
      content: var(--tw-content);
    }
    &:not(:empty) {
      gap: calc(var(--spacing) * 4);
    }
    &::before {
      width: var(--divider-start);
    }
    &::after {
      width: var(--divider-end);
    }
    --divider-border: var(--divider-color-modifier, var(--divider-color));
    --divider-color: var(--color-neutral-300);
    --divider-width: 1px;
    --divider-start: 100%;
    --divider-end: 100%;
  }
  .divider-horizontal {
    &.divider {
      height: 100%;
      flex-direction: column;
      &::before, &::after {
        height: 100%;
        width: calc(var(--spacing) * 0.25);
        border-inline-start-style: var(--tw-border-style);
        border-inline-start-width: var(--divider-width);
      }
      &::before {
        height: var(--divider-start);
      }
      &::after {
        height: var(--divider-end);
      }
    }
  }
  .divider-dashed {
    &::before, &::after {
      --tw-border-style: dashed;
      border-style: dashed;
    }
  }
  .divider-dotted {
    &::before, &::after {
      --tw-border-style: dotted;
      border-style: dotted;
    }
  }
  .divider-solid {
    &::before, &::after {
      --tw-border-style: solid;
      border-style: solid;
    }
  }
  .divider-neutral {
    --divider-color: var(--color-neutral);
  }
  .divider-primary {
    --divider-color: var(--color-primary);
  }
  .divider-secondary {
    --divider-color: var(--color-secondary);
  }
  .divider-info {
    --divider-color: var(--color-info);
  }
  .divider-accent {
    --divider-color: var(--color-accent);
  }
  .divider-success {
    --divider-color: var(--color-success);
  }
  .divider-warning {
    --divider-color: var(--color-warning);
  }
  .divider-danger {
    --divider-color: var(--color-danger);
  }
  .divider-subtle {
    --divider-color-modifier: var(--divider-color);
    @supports (color: color-mix(in lab, red, red)) {
      --divider-color-modifier: color-mix(in oklch,var(--divider-color) 20%,white);
    }
  }
  .divider-start {
    --divider-start: calc(var(--spacing) * 10);
  }
  .divider-end {
    --divider-end: calc(var(--spacing) * 10);
  }
  .divider-start-0 {
    &::before {
      --tw-content: none;
      content: none;
    }
  }
  .divider-end-0 {
    &::after {
      --tw-content: none;
      content: none;
    }
  }
}
@layer components {
  .dropdown {
    position: relative;
    display: inline-block;
    :where(a,button):is(:focus):not(:focus-visible) ~ ul {
      height: auto;
      visibility: visible;
    }
    ul {
      display: block;
      position: absolute;
      top: 100%;
      bottom: auto;
      left: 0;
      right: auto;
      z-index: 10;
      height: 0;
      visibility: hidden;
      margin-block: calc(var(--spacing) * 1);
      max-width: calc(var(--spacing) * 48);
      min-width: calc(var(--spacing) * 48);
      box-shadow: var(--shadow-lg);
      border: 1px solid var(--color-neutral-200);
      border-radius: var(--radius-lg);
      background-color: var(--color-white);
      overflow: hidden;
      @media (prefers-reduced-motion: no-preference) {
        interpolate-size: allow-keywords;
      }
      transition-property: height,visibility;
      transition-duration: var(--tt-duration, var(--default-transition-duration));
      transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
      a {
        display: flex;
        justify-content: flex-start;
        border-radius: 0;
      }
    }
    &.dropdown-left ul {
      left: auto;
      right: 0;
    }
    &.dropdown-up .btn ~ ul {
      top: auto;
      bottom: 100%;
    }
  }
}
@layer components {
  .form {
    .form-field {
      display: grid;
      grid-template-columns: 1fr;
      align-content: start;
      align-items: start;
      gap: calc(var(--spacing) * 3);
      --field-cols: 1;
      &.field-row {
        --field-cols: 2;
        grid-template-columns: minmax(calc(var(--spacing) * 16), calc(var(--spacing) * 32)) 1fr;
      }
    }
    .form-field:has(+ .form-field) {
      margin-block-end: calc(var(--spacing) * 4);
    }
    .fieldset {
      padding-block: calc(var(--spacing) * 4);
      padding-inline: calc(var(--spacing) * 4);
      background-color: var(--color-neutral-100);
      border-radius: var(--radius-md);
      border: 1px solid var(--color-neutral-300);
      box-shadow: var(--shadow-xs);
      legend {
        padding-inline: calc(var(--spacing) * 1);
        color: var(--color-neutral-500);
        font-weight: var(--font-weight-medium);
        font-size: var(--text-lg);
        line-height: var(--text-lg--line-height);
      }
      &.fieldset-outline {
        background: none;
        box-shadow: none;
        legend {
          padding-inline: calc(var(--spacing) * 0);
        }
      }
      &.fieldset-solid {
        border-width: 0px;
        background-color: var(--color-neutral-200);
      }
    }
    label {
      --label-disabled: var(--color-neutral-400);
    }
    .label {
      display: flex;
      align-items: center;
      gap: calc(var(--spacing) * 1);
      color: var(--color-neutral-500);
      font-weight: var(--font-weight-medium);
      svg, img, i {
        block-size: 1.25em;
        min-inline-size: 1.25em;
      }
    }
    .invalid {
      opacity: 0;
      :where(.form-field:has(:invalid, [class*="-invalid"])) & {
        opacity: 1;
      }
      transition-property: opacity;
      transition-duration: var(--tt-duration, var(--default-transition-duration));
      transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    }
  }
}
@layer components {
  .input {
    overflow: hidden;
    block-size: var(--input-size);
    border: var(--input-border);
    border-radius: var(--radius-md);
    outline: var(--input-focus);
    background-color: var(--input-bg);
    box-shadow: var(--shadow-xs);
    --input-bg: var(--color-neutral-50);
    --input-border: 1px solid var(--color-neutral-300);
    --input-focus: 0px solid var(--color-blue-200);
    --input-text: var(--color-neutral-800);
    --input-label: var(--color-neutral-400);
    --input-size: calc(var(--spacing) * 9);
    &:is(input), input {
      overflow: hidden;
      inline-size: 100%;
      padding-inline: calc(var(--spacing) * 4);
      color: var(--input-text);
      &::placeholder {
        font-style: italic;
      }
      &:read-only:not(:disabled, [disabled]) {
        background-color: var(--color-neutral-200);
      }
      &:is([type="file"]) {
        padding-inline-start: 0px;
        &:not(:disabled, [disabled]) {
          background-color: var(--input-bg);
        }
        &::file-selector-button {
          block-size: 100%;
          min-inline-size: var(--input-size);
          padding-inline: calc(var(--spacing) * 4);
          margin-inline-end: calc(var(--spacing) * 4);
          background-color: var(--color-neutral-100);
          border-inline-end: var(--input-border);
        }
        &::file-selector-button:hover {
          background-color: var(--color-neutral-200);
        }
      }
    }
    &:is(:disabled, [disabled]), &:has(:disabled, [disabled]) {
      cursor: not-allowed;
      background-color: var(--color-neutral-200);
      box-shadow: none;
    }
    &:not(.input-nofocus):focus-visible, &:not(.input-nofocus):has(:focus-visible) {
      outline-width: 2px;
      border-color: var(--color-blue-400);
      background-color: var(--color-white);
    }
    &.input-validate:invalid, &.input-validate:has(:invalid), &.input-invalid, &:has(.input-invalid) {
      border-color: var(--color-red-400);
      outline-width: 2px;
      outline-style: solid;
      outline-color: var(--color-red-200);
    }
    &:not(input) {
      display: flex;
      align-items: center;
      > input {
        flex: 1;
        outline-width: 0;
        block-size: 100%;
      }
      > :where(:not(input, .btn)) {
        padding-inline: calc(var(--spacing) * 4) calc(var(--spacing) * 0);
        color: var(--input-label);
        &:last-child {
          padding-inline: calc(var(--spacing) * 0) calc(var(--spacing) * 4);
        }
      }
      > .btn {
        block-size: 100%;
        min-inline-size: var(--input-size);
        &:has(~ input) {
          border-inline-end: var(--input-border);
        }
        &:not(:has(~ input)) {
          border-inline-start: var(--input-border);
        }
      }
    }
    :where(svg, img) {
      block-size: 1.25em;
      .btn & {
        width: auto;
        min-width: auto;
      }
    }
    &:has(.input-prefix, .input-suffix) {
      .input-prefix, .input-suffix {
        block-size: 100%;
        min-inline-size: var(--input-size);
        align-content: center;
        justify-items: center;
        text-align: center;
        padding-inline: calc(var(--spacing) * 2);
        background-color: var(--color-neutral-100);
      }
      .input-prefix {
        border-inline-end: var(--input-border);
      }
      .input-suffix {
        border-inline-start: var(--input-border);
      }
    }
  }
  .input-clear {
    border: none;
    box-shadow: none;
    background: none;
  }
  .input-solid {
    border: none;
    box-shadow: none;
    background-color: var(--color-neutral-100);
  }
  .input-xs {
    --input-size: calc(var(--spacing) * 7);
    font-size: var(--text-xs);
    line-height: var(--text-xs--line-height);
  }
  .input-sm {
    --input-size: calc(var(--spacing) * 8);
    font-size: var(--text-sm);
    line-height: var(--text-sm--line-height);
  }
  .input-lg {
    --input-size: calc(var(--spacing) * 10);
    font-size: var(--text-lg);
    line-height: var(--text-lg--line-height);
  }
  .input-xl {
    --input-size: calc(var(--spacing) * 12);
    font-size: var(--text-xl);
    line-height: var(--text-xl--line-height);
  }
}
@layer components {
  .menu :where(ul li) {
    display: flex;
    flex-direction: column;
    min-height: calc(var(--spacing) * 10);
  }
  .menu {
    @media (prefers-reduced-motion: no-preference) {
      interpolate-size: allow-keywords;
    }
    font-weight: var(--font-weight-medium);
    > ul {
      > li {
        &:has(ul) {
          > a:focus svg:last-of-type {
            rotate: 180deg;
          }
          > a:focus ~ ul {
            height: auto;
            visibility: visible;
          }
          > ul:has(:hover,:focus,:active,:checked) {
            height: auto;
            visibility: visible;
          }
          ul {
            height: 0;
            visibility: hidden;
            overflow: hidden;
            padding-top: calc(var(--spacing) * 1);
            transition-property: height,visibility;
            transition-duration: var(--tt-duration, var(--default-transition-duration));
            transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
            > li {
              .btn {
                color: var(--color-neutral-400);
              }
              > .btn {
                padding-inline-start: calc(var(--spacing) * 9);
              }
              &:has(ul) {
                .btn {
                  input[type='checkbox'] {
                    display: none;
                    &:checked ~ svg {
                      rotate: 90deg;
                    }
                  }
                  svg {
                    transition-property: rotate;
                    transition-duration: var(--tt-duration, var(--default-transition-duration));
                    transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
                  }
                }
                .btn:has(input:checked) ~ ul {
                  height: auto;
                  visibility: visible;
                }
                ul li {
                  border-left: 1px solid var(--color-neutral-300);
                  margin-inline-start: calc(var(--spacing) * 11);
                  padding-inline-start: calc(var(--spacing) * 3);
                  > .btn {
                    padding-inline-start: calc(var(--spacing) * 2);
                  }
                }
              }
            }
            &.open {
              height: auto;
              visibility: visible;
            }
          }
        }
        &:not(:has(a)) {
          justify-content: center;
        }
      }
    }
    .btn {
      display: flex;
      justify-content: stretch;
    }
  }
}
@layer components {
  .modal {
    opacity: 0;
    min-block-size: var(--modal-block);
    inline-size: var(--modal-inline);
    background-color: var(--color-white);
    border: 1px solid var(--color-neutral-50);
    border-radius: var(--radius-md);
    box-shadow: var(--tt-ring-shadow), var(--shadow-xl);
    --modal-block: calc(var(--spacing) * 60);
    --modal-inline: calc(var(--spacing) * 120);
    --modal-header-block: calc(var(--spacing) * 14);
    --modal-footer-block: calc(var(--spacing) * 16);
    --tt-ring-shadow: 0 0 0 1px var(--color-neutral-200, currentColor);
    transition-property: display, opacity, overlay, scale, transform, visibility;
    transition-behavior: allow-discrete;
    transition-duration: var(--tt-duration, var(--default-transition-duration));
    transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    @starting-style {
      &:open {
        opacity: 0;
        scale: 80%;
      }
    }
    &:open {
      opacity: 1;
      button:focus-visible {
        background-color: inherit;
      }
    }
    &::backdrop {
      background-color: color-mix(in srgb, #000 0%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-black) 0%, transparent);
      }
      transition-property: display, overlay, background-color;
      transition-behavior: allow-discrete;
      transition-duration: var(--tt-duration, var(--default-transition-duration));
      transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    }
    &:open::backdrop {
      background-color: color-mix(in srgb, #000 25%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-black) 25%, transparent);
      }
    }
    @starting-style {
      &:open::backdrop {
        background-color: color-mix(in srgb, #000 0%, transparent);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-black) 0%, transparent);
        }
      }
    }
    .card-body {
      min-block-size: calc(var(--modal-block) - var(--card-header-block) - var(--card-footer-block));
    }
    .modal-dismiss-x {
      position: absolute;
      inset-block-start: calc(var(--spacing) * 4);
      inset-inline-end: calc(var(--spacing) * 4);
    }
    .modal-static, .modal-dismiss-backdrop {
      display: grid;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      z-index: -1;
    }
    &:has(.modal-static:active) {
      scale: 105%;
    }
  }
  .modal-center {
    align-content: center;
    justify-items: center;
  }
  .modal-sm {
    --modal-block: calc(var(--spacing) * 48);
    --modal-inline: calc(var(--spacing) * 96);
  }
  .modal-lg {
    --modal-block: calc(var(--spacing) * 84);
    --modal-inline: calc(var(--spacing) * 168);
  }
  .modal-xl {
    --modal-block: calc(var(--spacing) * 120);
    --modal-inline: calc(var(--spacing) * 240);
  }
  .modal-focus {
    block-size: 100%;
    inline-size: 100%;
    margin-block: calc(var(--spacing) * 4);
  }
}
@layer components {
  .popover {
    position: relative;
    display: inline-block;
    --popover-content-margin: calc(var(--spacing) * 2);
    --tt-ring-shadow: 0 0 0 1px var(--color-neutral-200, currentColor);
  }
  .popover-toggle {
    .popover &:focus + .popover-content {
      opacity: 1;
      scale: 1;
      visibility: visible;
    }
  }
  .popover-content {
    .popover:is(:not(.open)) & {
      opacity: 0;
      scale: 0;
      visibility: hidden;
    }
    .popover & {
      position: absolute;
      z-index: 21;
      min-width: calc(var(--spacing) * 64);
      padding: calc(var(--spacing) * 4);
      background-color: var(--color-white);
      border: 1px solid var(--color-neutral-50);
      border-radius: var(--radius-md);
      box-shadow: var(--tt-ring-shadow), var(--shadow-md);
      transition-property: opacity, scale, visibility;
      transition-duration: var(--tt-duration, var(--default-transition-duration));
      transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    }
    .popover.popover-top & {
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      transform-origin: bottom left;
      margin-block-end: var(--popover-content-margin);
    }
    .popover.popover-top-start & {
      bottom: 100%;
      left: 0;
      transform-origin: bottom left;
      margin-block-end: var(--popover-content-margin);
    }
    .popover.popover-top-end & {
      bottom: 100%;
      right: 0;
      transform-origin: bottom right;
      margin-block-end: var(--popover-content-margin);
    }
    .popover.popover-bottom & {
      left: 50%;
      transform: translateX(-50%);
      transform-origin: top left;
      margin-block-start: var(--popover-content-margin);
    }
    .popover.popover-bottom-start & {
      left: 0;
      transform-origin: top left;
      margin-block-start: var(--popover-content-margin);
    }
    .popover.popover-bottom-end & {
      right: 0;
      transform-origin: top right;
      margin-block-start: var(--popover-content-margin);
    }
    .popover.popover-left & {
      top: 50%;
      transform: translateY(-50%);
      right: 100%;
      transform-origin: top right;
      margin-inline-end: var(--popover-content-margin);
    }
    .popover.popover-left-start & {
      bottom: 0;
      right: 100%;
      transform-origin: bottom right;
      margin-inline-end: var(--popover-content-margin);
    }
    .popover.popover-left-end & {
      top: 0;
      right: 100%;
      transform-origin: top right;
      margin-inline-end: var(--popover-content-margin);
    }
    .popover.popover-right & {
      top: 50%;
      transform: translateY(-50%);
      left: 100%;
      transform-origin: top left;
      margin-inline-start: var(--popover-content-margin);
    }
    .popover.popover-right-start & {
      bottom: 0;
      left: 100%;
      transform-origin: bottom left;
      margin-inline-start: var(--popover-content-margin);
    }
    .popover.popover-right-end & {
      top: 0;
      left: 100%;
      transform-origin: top left;
      margin-inline-start: var(--popover-content-margin);
    }
  }
}
@layer components {
  .radio {
    position: relative;
    appearance: none;
    cursor: pointer;
    block-size: var(--radio-size);
    min-inline-size: var(--radio-size);
    border: 1px solid var(--radio-border);
    border-radius: 50%;
    outline: 0px solid var(--radio-focus-outline);
    outline-offset: 0px;
    background-color: var(--radio-bg);
    box-shadow: var(--shadow-xs);
    --radio-size: calc(var(--spacing) * 4.5);
    --radio-bg: var(--color-neutral-50);
    --radio-border: color-mix(in srgb, #000 15%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      --radio-border: color-mix(in oklab, var(--color-black) 15%, transparent);
    }
    --radio-focus-outline: var(--color-blue-200);
    --radio-focus-border: var(--color-blue-400);
    --radio-outline-border: var(--color-neutral-300);
    --radio-outline-disabled-border: var(--color-neutral-200);
    --radio-invalid-bg: var(--color-red-50);
    --radio-invalid-border: var(--color-red-400);
    transition-property: background-color, border-color;
    transition-duration: var(--tt-duration, var(--default-transition-duration));
    transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    &::before {
      content: "";
      opacity: 0;
      display: block;
      position: absolute;
      inset-block-start: 50%;
      inset-inline-start: 50%;
      transform: translate(-50%, -50%);
      block-size: calc(var(--radio-size) * 0.5);
      inline-size: calc(var(--radio-size) * 0.5);
      border-radius: 50%;
      background-color: var(--color-white);
      transition-property: opacity;
      transition-duration: var(--tt-duration, var(--default-transition-duration));
      transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    }
    &:checked {
      background-color: var(--color-blue-400);
      &::before {
        opacity: 1;
      }
    }
    &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-color: color-mix(in srgb, #000 5%, transparent);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-black) 5%, transparent);
      }
      background-color: var(--color-neutral-100);
      box-shadow: none;
      &:checked {
        border-color: color-mix(in srgb, #000 15%, transparent);
        @supports (color: color-mix(in lab, red, red)) {
          border-color: color-mix(in oklab, var(--color-black) 15%, transparent);
        }
        &::before {
          background-color: var(--color-neutral-400);
        }
      }
      label:has(&) {
        color: var(--color-neutral-400);
      }
    }
    &:focus-visible {
      outline-width: 2px;
      border-color: var(--radio-focus-border);
    }
    label:has(&) {
      cursor: pointer;
      display: inline-flex;
      align-items: start;
      justify-content: start;
      gap: calc(var(--spacing) * 2);
      line-height: var(--text-3xl--line-height);
    }
    &.radio-validate:invalid, &.radio-invalid:not(:checked) {
      border-color: var(--radio-invalid-border);
      background-color: var(--radio-invalid-bg);
    }
  }
  .radio-inline {
    display: flex;
    flex-direction: row;
    gap: calc(var(--spacing) * 4);
  }
  .radio-list {
    display: flex;
    flex-direction: column;
    gap: calc(var(--spacing) * 2);
  }
  .radio-outline {
    border-color: var(--radio-outline-border);
    box-shadow: none;
    background: none;
    &:is(:disabled, [disabled]) {
      border-color: var(--radio-outline-disabled-border);
      background: none;
    }
    &::before {
      background-color: var(--color-blue-400);
    }
    &:checked {
      border-color: var(--color-blue-400);
      background: none;
    }
  }
  .radio-solid {
    border: none;
    box-shadow: none;
    background-color: var(--color-neutral-200);
    &:is(:disabled, [disabled]) {
      background-color: var(--color-neutral-300);
    }
  }
  .radio-xs {
    --radio-size: calc(var(--spacing) * 3.5);
  }
  .radio-sm {
    --radio-size: calc(var(--spacing) * 4);
  }
  .radio-lg {
    --radio-size: calc(var(--spacing) * 6);
  }
  .radio-xl {
    --radio-size: calc(var(--spacing) * 7);
  }
}
@layer components {
  .select {
    appearance: none;
    cursor: pointer;
    block-size: var(--select-height);
    padding-inline: calc(var(--spacing) * 3) calc(var(--spacing) * 8);
    border: 1px solid var(--select-border);
    border-radius: var(--radius-sm);
    outline: 0px solid var(--select-focus-outline);
    outline-offset: 0px;
    background-color: var(--select-bg);
    box-shadow: var(--shadow-xs);
    color: var(--select-text);
    transition-property: background-color, border-color, box-shadow;
    transition-duration: var(--tt-duration, var(--default-transition-duration));
    transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 15 12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9" /></svg>');
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.25em;
    --select-height: calc(var(--spacing) * 9);
    --select-bg: var(--color-neutral-50);
    --select-hover-bg: var(--color-neutral-100);
    --select-active-bg: var(--color-neutral-200);
    --select-border: color-mix(in srgb, #000 15%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      --select-border: color-mix(in oklab, var(--color-black) 15%, transparent);
    }
    --select-focus-outline: var(--color-blue-200);
    --select-focus-border: var(--color-blue-400);
    --select-disabled-bg: var(--color-neutral-200);
    --select-invalid-bg: var(--color-red-50);
    --select-invalid-border: var(--color-red-400);
    --select-outline-border: var(--color-neutral-300);
    --select-outline-hover-border: var(--color-neutral-400);
    --select-outline-active-border: var(--color-neutral-500);
    --select-outline-disabled: var(--color-neutral-200);
    --select-solid-bg: var(--color-neutral-100);
    --select-solid-hover-bg: var(--color-neutral-200);
    --select-solid-active-bg: var(--color-neutral-300);
    --select-text: var(--color-neutral-800);
    --placeholder-color: var(--color-neutral-400);
    &:hover {
      --select-bg: var(--select-hover-bg);
      border-color: var(--select-outline-hover-border);
    }
    &:active {
      --select-bg: var(--select-active-bg);
    }
    &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      opacity: 0.7;
      background-color: var(--select-disabled-bg);
      box-shadow: none;
      border-color: var(--select-outline-disabled);
      color: var(--select-disabled);
    }
    &:focus-visible {
      outline-width: 2px;
      border-color: var(--select-focus-border);
    }
    &.select-validate:invalid, &.select-invalid {
      border: 1px solid var(--select-invalid-border);
      background-color: var(--select-invalid-bg);
    }
  }
  .select-outline, .select-outline-bold {
    border-color: var(--select-outline-border);
    box-shadow: none;
    background: none;
    &:hover {
      border-color: var(--select-outline-hover-border);
    }
    &:active {
      border-color: var(--select-outline-active-border);
    }
    &:is(:disabled, [disabled]) {
      border-color: var(--select-outline-disabled);
      background: none;
    }
  }
  .select-outline-bold {
    border-width: 2px;
  }
  .select-clear {
    border-color: transparent;
    box-shadow: none;
    background: none;
  }
  .select-solid {
    border: none;
    box-shadow: none;
    --select-bg: var(--select-solid-bg);
    &:hover {
      --select-bg: var(--select-solid-hover-bg);
    }
    &:active {
      --select-bg: var(--select-solid-active-bg);
    }
  }
  .select-xs {
    --select-height: calc(var(--spacing) * 7);
    font-size: var(--text-xs);
  }
  .select-sm {
    --select-height: calc(var(--spacing) * 8);
    font-size: var(--text-sm);
  }
  .select-lg {
    --select-height: calc(var(--spacing) * 11);
    font-size: var(--text-lg);
  }
  .select-xl {
    --select-height: calc(var(--spacing) * 12);
    font-size: var(--text-xl);
  }
}
@layer components {
  .spinner {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    block-size: var(--spinner-size);
    inline-size: var(--spinner-size);
    border: var(--spinner-border-width) solid var(--spinner-border);
    border-top-color: var(--spinner-accent);
    border-radius: calc(infinity * 1px);
    animation: spin 0.8s linear infinite;
    --spinner-size: calc(var(--spacing) * 5);
    --spinner-border-width: 2px;
    --spinner-border: var(--color-neutral-200);
    --spinner-accent: var(--color-neutral-600);
    label:has(&) {
      display: inline-flex;
      align-items: center;
      gap: calc(var(--spacing) * 2);
    }
  }
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  .spinner-clear {
    --spinner-border: transparent;
  }
  .spinner-solid {
    --spinner-border-width: calc(var(--spinner-size) / 2);
  }
  .spinner-primary {
    --spinner-accent: var(--color-primary-500);
  }
  .spinner-secondary {
    --spinner-accent: var(--color-secondary-500);
  }
  .spinner-success {
    --spinner-accent: var(--color-success-500);
  }
  .spinner-danger {
    --spinner-accent: var(--color-danger-500);
  }
  .spinner-warning {
    --spinner-accent: var(--color-warning-500);
  }
  .spinner-info {
    --spinner-accent: var(--color-info-500);
  }
  .spinner-xs {
    --spinner-size: calc(var(--spacing) * 3);
  }
  .spinner-sm {
    --spinner-size: calc(var(--spacing) * 4);
  }
  .spinner-lg {
    --spinner-size: calc(var(--spacing) * 7);
    --spinner-border-width: 3px;
  }
  .spinner-xl {
    --spinner-size: calc(var(--spacing) * 9);
    --spinner-border-width: 4px;
  }
}
@layer components {
  .switch {
    appearance: none;
    cursor: pointer;
    position: relative;
    block-size: var(--switch-height);
    min-inline-size: var(--switch-width);
    inset-block-start: var(--switch-margin);
    border: 1px solid var(--switch-border);
    border-radius: var(--switch-height);
    outline: 0px solid var(--switch-focus-outline);
    outline-offset: 0px;
    background-color: var(--switch-bg);
    box-shadow: var(--shadow-xs);
    --switch-height: calc(var(--spacing) * 4.5);
    --switch-width: calc(var(--switch-height) * 1.8);
    --switch-margin: 0.2em;
    --switch-thumb-start: calc(var(--spacing) * 0.3);
    --switch-thumb-size: calc(var(--switch-height) - calc(var(--spacing) * 1));
    --switch-thumb-bg: var(--color-white);
    --switch-bg: var(--color-neutral-200);
    --switch-border: color-mix(in srgb, #000 15%, transparent);
    @supports (color: color-mix(in lab, red, red)) {
      --switch-border: color-mix(in oklab, var(--color-black) 15%, transparent);
    }
    --switch-focus-outline: var(--color-blue-200);
    --switch-focus-border: var(--color-blue-400);
    --switch-checked-bg: var(--color-blue-400);
    --switch-invalid-bg: var(--color-red-100);
    --switch-invalid-border: var(--color-red-400);
    --switch-solid-bg: var(--color-neutral-200);
    --switch-outline: var(--color-neutral-300);
    --switch-outline-disabled: var(--color-neutral-200);
    --switch-outline-disabled-checked: var(--color-neutral-300);
    --switch-disabled-bg: var(--color-neutral-200);
    --switch-disabled-border: var(--color-neutral-300);
    --switch-disabled-checked-bg: var(--color-neutral-300);
    --switch-disabled-thumb-bg: var(--color-neutral-100);
    --switch-disabled-thumb-checked-bg: var(--color-neutral-300);
    transition-property: background-color;
    transition-duration: var(--tt-duration, var(--default-transition-duration));
    transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    &::before {
      content: "";
      position: absolute;
      inset-block-start: 50%;
      inset-inline-start: var(--switch-thumb-start);
      transform: translateY(-50%);
      block-size: var(--switch-thumb-size);
      inline-size: var(--switch-thumb-size);
      border-radius: calc(infinity * 1px);
      background-color: var(--switch-thumb-bg);
      box-shadow: var(--shadow-sm);
      transition-property: transform;
      transition-duration: var(--tt-duration, var(--default-transition-duration));
      transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    }
    &:checked {
      background-color: var(--switch-checked-bg);
      &::before {
        transform: translate(calc(var(--switch-width) - var(--switch-thumb-size) - calc(var(--spacing) * 1)), -50%);
      }
    }
    &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-color: var(--switch-disabled-border);
      background-color: var(--switch-disabled-bg);
      box-shadow: none;
      &:checked {
        background-color: var(--switch-disabled-checked-bg);
        &::before {
          background-color: var(--switch-disabled-thumb-bg);
        }
      }
      label:has(&) {
        color: var(--label-disabled);
      }
      &::before {
        background-color: var(--switch-disabled-thumb-checked-bg);
        box-shadow: none;
      }
    }
    &:focus-visible {
      outline-width: 2px;
      border-color: var(--switch-focus-border);
    }
    &.switch-validate:invalid, &.switch-invalid:not(:checked) {
      border: 1px solid var(--switch-invalid-border);
      background-color: var(--switch-invalid-bg);
    }
    label:has(&) {
      cursor: pointer;
      display: inline-flex;
      align-items: start;
      justify-content: start;
      gap: calc(var(--spacing) * 2);
    }
  }
  .switch-inline {
    display: flex;
    flex-direction: row;
    gap: calc(var(--spacing) * 4);
  }
  .switch-list {
    display: flex;
    flex-direction: column;
    gap: calc(var(--spacing) * 2);
  }
  .switch-outline, .switch-outline-bold {
    border-color: var(--switch-outline);
    box-shadow: none;
    background: none;
    &::before {
      background-color: var(--switch-outline);
      box-shadow: none;
    }
    &:is(:disabled, [disabled]) {
      border-color: var(--switch-outline-disabled);
      background: none;
      &::before {
        background-color: var(--switch-outline-disabled);
      }
      &:checked {
        border-color: var(--switch-outline-disabled-checked);
        background: none;
        &::before {
          background-color: var(--switch-outline-disabled-checked);
        }
      }
    }
    &:checked {
      border-color: var(--switch-checked-bg);
      background-color: var(--color-white);
      &::before {
        background-color: var(--switch-checked-bg);
      }
    }
  }
  .switch-outline-bold {
    border-width: 2px;
    --switch-thumb-start: calc(var(--spacing) * 0.2);
    --switch-thumb-size: calc(var(--switch-height) - calc(var(--spacing) * 1.5));
    &:checked {
      &::before {
        transform: translate(calc(var(--switch-width) - var(--switch-thumb-size) - calc(var(--spacing) * 1.5)), -50%);
      }
    }
  }
  .switch-solid {
    border: none;
    box-shadow: none;
    background-color: var(--switch-solid-bg);
    &::before {
      --switch-thumb-start: calc(var(--spacing) * 0.5);
    }
    &:checked {
      background-color: var(--switch-checked-bg);
    }
  }
  .switch-xs {
    --switch-height: calc(var(--spacing) * 3);
  }
  .switch-sm {
    --switch-height: calc(var(--spacing) * 3.5);
  }
  .switch-lg {
    --switch-height: calc(var(--spacing) * 6);
    --switch-margin: 0.1em;
  }
  .switch-xl {
    --switch-height: calc(var(--spacing) * 7);
    --switch-margin: 0em;
  }
}
@layer components {
  .tabs {
    display: flex;
    flex-wrap: wrap;
    gap: calc(var(--spacing) * 1);
    .tab {
      input[type="radio"] {
        display: none;
        visibility: hidden;
      }
      &:has(input:checked) {
        &+.tab-content {
          display: block;
          width: 100%;
        }
      }
    }
    .tab-content {
      display: none;
      order: calc(infinity);
    }
  }
}
@layer components {
  .table {
    text-align: left;
    thead {
      tr {
        th {
          background-color: var(--table-header-bg);
          font-weight: var(--font-weight-semibold);
        }
      }
    }
    tbody {
      tr {
        &:hover {
          background-color: var(--table-row-hover-bg);
        }
        &:nth-of-type(odd):not(:hover) {
          background-color: var(--table-striped-bg);
        }
      }
    }
    :where(thead tr,tbody tr:not(:last-child)) {
      border-bottom: var(--table-row-border);
    }
    :where(th,td) {
      padding-block: calc(var(--spacing) * 4);
      padding-inline: calc(var(--spacing) * 4);
      vertical-align: middle;
    }
    --table-header-bg: var(--color-neutral-200);
    --table-row-border: 1px solid var(--color-neutral-200);
  }
  .table-hover {
    --table-row-hover-bg: var(--color-neutral-100);
  }
  .table-striped {
    --table-striped-bg: var(--color-neutral-100);
  }
  .table-borderless {
    --table-row-border: none;
    --table-border: none;
  }
  .table-compact {
    :where(th,td) {
      padding-block: calc(var(--spacing) * 2);
      padding-inline: calc(var(--spacing) * 2);
    }
  }
}
@layer components {
  .textarea {
    block-size: calc(var(--spacing) * 24);
    padding-block: calc(var(--spacing) * 2);
    padding-inline: calc(var(--spacing) * 4);
    border: var(--textarea-border);
    border-radius: var(--radius-md);
    outline: var(--textarea-outline);
    background-color: var(--textarea-bg);
    box-shadow: var(--shadow-xs);
    color: var(--textarea-text);
    &::placeholder {
      font-style: italic;
    }
    --textarea-bg: var(--color-neutral-50);
    --textarea-border: 1px solid var(--color-neutral-300);
    --textarea-outline: 0px solid var(--color-blue-200);
    --textarea-text: var(--color-neutral-800);
    &:read-only:not(:disabled, [disabled]) {
      background-color: var(--color-neutral-200);
    }
    &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      background-color: var(--color-neutral-200);
      box-shadow: none;
      color: var(--textarea-text);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--textarea-text) 60%, transparent);
      }
    }
    &:focus-visible {
      outline-width: 2px;
      border-color: var(--color-blue-400);
      background-color: var(--color-white);
    }
  }
  .textarea-clear {
    border: none;
    box-shadow: none;
    background: none;
  }
  .textarea-solid {
    border: none;
    box-shadow: none;
    background-color: var(--color-neutral-100);
  }
  .textarea-validate:invalid, .textarea-invalid {
    border-color: var(--color-red-400);
    outline-width: 2px;
    outline-style: solid;
    outline-color: var(--color-red-200);
    & ~ .invalid-msg {
      opacity: 1;
    }
  }
  .textarea-xs {
    font-size: var(--text-xs);
    line-height: var(--text-xs--line-height);
  }
  .textarea-sm {
    font-size: var(--text-sm);
    line-height: var(--text-sm--line-height);
  }
  .textarea-lg {
    font-size: var(--text-lg);
    line-height: var(--text-lg--line-height);
  }
  .textarea-xl {
    font-size: var(--text-xl);
    line-height: var(--text-xl--line-height);
  }
}
@layer components {
  .toast {
    display: flex;
    opacity: 1;
    visibility: visible;
    align-items: start;
    min-block-size: calc(var(--spacing) * 12);
    inline-size: var(--toast-size);
    padding: calc(var(--spacing) * 2);
    margin: var(--toast-spacing);
    background-color: var(--toast-bg);
    border: 1px solid var(--color-neutral-50);
    border-radius: var(--radius-sm);
    box-shadow: var(--tt-ring-shadow), var(--shadow-md);
    transition-property: display, opacity, transform, visibility;
    transition-behavior: allow-discrete;
    transition-duration: var(--tt-duration, var(--default-transition-duration));
    transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    --toast-bg: var(--color-white);
    --toast-size: calc(var(--spacing) * 84);
    --tt-ring-shadow: 0 0 0 1px var(--color-neutral-200, currentColor);
    --toast-spacing: calc(var(--spacing) * 4);
    &[class*="toast-dismiss-"] {
      animation-name: toastfadeout;
      animation-duration: 1s;
      animation-fill-mode: forwards;
      animation-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
      &:hover {
        animation-play-state: paused;
      }
    }
    &.toast-dismiss-1 {
      animation-delay: 1s;
    }
    &.toast-dismiss-2 {
      animation-delay: 2s;
    }
    &.toast-dismiss-3 {
      animation-delay: 3s;
    }
    &.toast-dismiss-4 {
      animation-delay: 4s;
    }
    &.toast-dismiss-5 {
      animation-delay: 5s;
    }
    &.toast-dismiss-6 {
      animation-delay: 6s;
    }
    &.toast-dismiss-7 {
      animation-delay: 7s;
    }
    &.toast-dismiss-8 {
      animation-delay: 8s;
    }
    &.toast-dismiss-9 {
      animation-delay: 9s;
    }
    &.toast-dismiss-10 {
      animation-delay: 10s;
    }
    &.toast-dismiss-11 {
      animation-delay: 11s;
    }
    &.toast-dismiss-12 {
      animation-delay: 12s;
    }
    &.toast-dismiss-13 {
      animation-delay: 13s;
    }
    &.toast-dismiss-14 {
      animation-delay: 14s;
    }
    &.toast-dismiss-15 {
      animation-delay: 15s;
    }
    &.toast-dismiss-16 {
      animation-delay: 16s;
    }
    &.toast-dismiss-17 {
      animation-delay: 17s;
    }
    &.toast-dismiss-18 {
      animation-delay: 18s;
    }
    &.toast-dismiss-19 {
      animation-delay: 19s;
    }
    &.toast-dismiss-20 {
      animation-delay: 20s;
    }
    &.toast-dismiss-t {
      animation-delay: var(--toast-delay-t);
    }
    input.toast-close[type="radio"] {
      appearance: none;
      &::after {
        content: "";
        mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" /></svg>');
        mask-repeat: no-repeat;
        mask-type: alpha;
        background-color: currentColor;
        color: var(--color-neutral-500);
        block-size: calc(var(--spacing) * 5);
        inline-size: calc(var(--spacing) * 5);
      }
    }
    &:has(input[type="radio"]:checked) {
      display: none;
      opacity: 0;
      visibility: none;
      :where( .toast-bottom, .toast-bottom-start, .toast-bottom-end ) & {
        transform: translateY(100%);
      }
      :where( .toast-top, .toast-top-start, .toast-top-end ) & {
        transform: translateY(-100%);
      }
    }
    .toast-icon {
      inline-size: calc(var(--spacing) * 5);
      margin: calc(var(--spacing) * 2);
    }
    .toast-content {
      flex: 1;
      margin: calc(var(--spacing) * 1);
    }
  }
  .toast-group {
    position: fixed;
    z-index: 41;
  }
  .toast-top {
    inset-block-start: 0;
    inset-inline-start: 50%;
    transform: translateX(-50%);
    justify-items: center;
  }
  .toast-top-start {
    inset-block-start: 0;
    inset-inline-start: 0;
    justify-items: start;
  }
  .toast-top-end {
    inset-block-start: 0;
    inset-inline-end: 0;
    justify-items: end;
  }
  .toast-bottom {
    inset-block-end: 0;
    inset-inline-start: 50%;
    transform: translateX(-50%);
    justify-items: center;
  }
  .toast-bottom-start {
    inset-block-end: 0;
    inset-inline-start: 0;
    justify-items: start;
  }
  .toast-bottom-end {
    inset-block-end: 0;
    inset-inline-end: 0;
    justify-items: end;
  }
  .toast-sm {
    --toast-size: calc(var(--spacing) * 64);
  }
  .toast-lg {
    --toast-size: calc(var(--spacing) * 114);
  }
  .toast-xl {
    --toast-size: calc(var(--spacing) * 140);
  }
  @keyframes toastfadeout {
    0% {
      opacity: 1;
      visibility: visible;
    }
    100% {
      display: none;
      opacity: 0;
      visibility: hidden;
    }
  }
}
@layer components {
  .tooltip {
    position: relative;
    overflow: visible;
    --tooltip-margin: calc(var(--spacing) * 2.5);
    --tooltip-arrow-size: calc(var(--spacing) * 3);
    --tooltip-arrow-margin: calc(var(--spacing) * 1.5);
    --tooltip-bg: var(--color-white);
    --tooltip-border: var(--color-neutral-100);
    &:hover::before, &:hover::after {
      content-visibility: visible;
      opacity: 1;
    }
    &:where(:not(.open))::before, &:where(:not(.open))::after {
      content-visibility: hidden;
      opacity: 0;
    }
    &::before, &::after {
      position: absolute;
      transition-property: content-visibility, opacity;
      transition-duration: var(--tt-duration, var(--default-transition-duration));
      transition-behavior: allow-discrete;
      transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
    }
    &::before {
      content: attr(data-tooltip);
      z-index: 31;
      padding-block: calc(var(--spacing) * 1);
      padding-inline: calc(var(--spacing) * 2);
      width: fit-content;
      background-color: var(--tooltip-bg);
      border: 1px solid var(--tooltip-border);
      border-radius: var(--radius-sm);
      box-shadow: var(--shadow-md);
      font-size: var(--text-sm);
      line-height: var(--text-sm--line-height);
    }
    &::after {
      content: "";
      z-index: 32;
      display: block;
      width: var(--tooltip-arrow-size);
      height: var(--tooltip-arrow-size);
      border: 1px solid var(--tooltip-border);
      background-color: var(--tooltip-bg);
      box-shadow: var(--shadow-md);
      clip-path: polygon(0 0, 0 100%, 100% 0);
    }
  }
  .tooltip:where( .tooltip-top, .tooltip-top-start, .tooltip-top-end )::after {
    rotate: 225deg;
  }
  .tooltip:where( .tooltip-bottom, .tooltip-bottom-start, .tooltip-bottom-end )::after {
    rotate: 45deg;
  }
  .tooltip:where( .tooltip-left, .tooltip-left-start, .tooltip-left-end )::after {
    rotate: 135deg;
  }
  .tooltip:where( .tooltip-right, .tooltip-right-start, .tooltip-right-end )::after {
    rotate: 315deg;
  }
  .tooltip.tooltip-top {
    &::before {
      bottom: calc(100% + var(--tooltip-margin));
      left: 50%;
      transform: translateX(-50%);
    }
    &::after {
      bottom: calc(100% + var(--tooltip-arrow-margin));
      inset-inline: 0;
      margin-inline: auto;
    }
  }
  .tooltip.tooltip-top-start {
    &::before {
      bottom: calc(100% + var(--tooltip-margin));
      left: 0;
    }
    &::after {
      bottom: calc(100% + var(--tooltip-arrow-margin));
      left: var(--tooltip-margin);
    }
  }
  .tooltip.tooltip-top-end {
    &::before {
      bottom: calc(100% + var(--tooltip-margin));
      right: 0;
    }
    &::after {
      bottom: calc(100% + var(--tooltip-arrow-margin));
      right: var(--tooltip-margin);
    }
  }
  .tooltip.tooltip-bottom {
    &::before {
      top: calc(100% + var(--tooltip-margin));
      left: 50%;
      transform: translateX(-50%);
    }
    &::after {
      top: calc(100% + var(--tooltip-arrow-margin));
      inset-inline: 0;
      margin-inline: auto;
    }
  }
  .tooltip.tooltip-bottom-start {
    &::before {
      top: calc(100% + var(--tooltip-margin));
      left: 0;
    }
    &::after {
      top: calc(100% + var(--tooltip-arrow-margin));
      left: var(--tooltip-margin);
    }
  }
  .tooltip.tooltip-bottom-end {
    &::before {
      top: calc(100% + var(--tooltip-margin));
      right: 0;
    }
    &::after {
      top: calc(100% + var(--tooltip-arrow-margin));
      right: var(--tooltip-margin);
    }
  }
  .tooltip.tooltip-left {
    &::before {
      right: calc(100% + var(--tooltip-margin));
      top: 50%;
      transform: translateY(-50%);
    }
    &::after {
      right: calc(100% + var(--tooltip-arrow-margin));
      inset-block: 0;
      margin-block: auto;
    }
  }
  .tooltip.tooltip-left-start {
    &::before {
      top: 0;
      right: calc(100% + var(--tooltip-margin));
    }
    &::after {
      top: var(--tooltip-arrow-margin);
      right: calc(100% + var(--tooltip-arrow-margin));
    }
  }
  .tooltip.tooltip-left-end {
    &::before {
      bottom: 0;
      right: calc(100% + var(--tooltip-margin));
    }
    &::after {
      bottom: var(--tooltip-arrow-margin);
      right: calc(100% + var(--tooltip-arrow-margin));
    }
  }
  .tooltip.tooltip-right {
    &::before {
      left: calc(100% + var(--tooltip-margin));
      top: 50%;
      transform: translateY(-50%);
    }
    &::after {
      left: calc(100% + var(--tooltip-arrow-margin));
      inset-block: 0;
      margin-block: auto;
    }
  }
  .tooltip.tooltip-right-start {
    &::before {
      top: 0;
      left: calc(100% + var(--tooltip-margin));
    }
    &::after {
      top: var(--tooltip-arrow-margin);
      left: calc(100% + var(--tooltip-arrow-margin));
    }
  }
  .tooltip.tooltip-right-end {
    &::before {
      bottom: 0;
      left: calc(100% + var(--tooltip-margin));
    }
    &::after {
      bottom: var(--tooltip-arrow-margin);
      left: calc(100% + var(--tooltip-arrow-margin));
    }
  }
}
@layer utilities {
  .spacer {
    flex: 1;
  }
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-leading {
  syntax: "*";
  inherits: false;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-tracking {
  syntax: "*";
  inherits: false;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-content {
  syntax: "*";
  inherits: false;
  initial-value: "";
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-border-style: solid;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-tracking: initial;
      --tw-outline-style: solid;
      --tw-content: "";
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
    }
  }
}
