/*
Modal component styles.

@description Provides a flexible, customizable modal dialog component with various sizes and animations. Supports backdrop interactions, static behavior, and dismissible functionality.

@layer components - Applies styles at the component layer of the CSS cascade.

@property {string} --modal-block - Controls the block (vertical) size of the modal
@property {string} --modal-inline - Controls the inline (horizontal) size of the modal
*/
@layer components {
    .modal {
        /* modifiers */
        --modal-block: --spacing(60);
        --modal-inline: calc(var(--modal-block) * 2);

        /* layout */
        display: none;
        flex-direction: column;
        opacity: 0;
        visibility: hidden;
        overflow: hidden;
        margin: auto;

        /* dimensions */
        min-block-size: var(--modal-block);
        inline-size: var(--modal-inline);
        /* reset browser default style */
        max-block-size: calc(100% - 1em);
        max-inline-size: calc(100% - 1em);

        /* colors */
        box-shadow: var(--shadow-high);

        /* animation */
        transition-property: display, opacity, overlay, scale, transform, visibility;
        transition-behavior: allow-discrete;
        transition-duration: var(--tt-duration, var(--default-transition-duration));
        transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));

        @starting-style {
            &:not(.modal-left, .modal-right, .modal-top, .modal-bottom) {
                display: none;
                opacity: 0;
                visibility: hidden;
                scale: 80%;
            }
            &:is(.modal-left) {
                transform: translateX(-100%);
            }
            &:is(.modal-right) {
                transform: translateX(100%);
            }
            &:is(.modal-top) {
                transform: translateY(-100%);
            }
            &:is(.modal-bottom) {
                transform: translateY(100%);
            }
        }

        &:is([open], :open) {
            display: flex;
            opacity: 1;
            visibility: visible;

            button:focus-visible {
                background-color: inherit;
            }
        }

        &::backdrop {
            background-color: transparent;

            /* animation */
            transition-property: display, overlay, background-color;
            transition-behavior: allow-discrete;
            transition-duration: var(--tt-duration, var(--default-transition-duration));
            transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
        }

        &:is([open], :open)::backdrop {
            pointer-events: none;
            background-color: color-mix(in oklab, var(--color-black) 30%, transparent);
        }

        @starting-style {
            &:is([open], :open)::backdrop {
                background-color: transparent;
            }
        }

        /* action outside of modal */
        .modal-static,
        .modal-dismiss-backdrop {
            display: grid;
            position: fixed;
            inset-block-start: 0;
            inset-inline-start: 0;
            block-size: 100%;
            inline-size: 100%;
            opacity: 0;
            z-index: -1;
        }
        &:has(.modal-static:active) {
            scale: 105%;
        }
    }

    /* sizes */
    .modal-sm {
        --modal-block: --spacing(48);
    }
    .modal-lg {
        --modal-block: --spacing(84);
    }
    .modal-xl {
        --modal-block: --spacing(120);
    }
    .modal-2xl {
        --modal-block: --spacing(160);
    }
    .modal-focus {
        block-size: 100%;
        inline-size: 100%;
    }

    /* positioning */
    .modal-left {
        inset-inline-start: --spacing(2);
        inset-inline-end: auto;
        block-size: 100%;

        &:not([open], :open) {
            transform: translateX(-100%);
        }
    }
    .modal-right {
        inset-inline-start: auto;
        inset-inline-end: --spacing(2);
        block-size: 100%;

        &:not([open], :open) {
            transform: translateX(100%);
        }
    }
    .modal-top {
        inset-block-start: --spacing(2);
        inset-block-end: auto;
        inline-size: 100%;

        &:not([open], :open) {
            transform: translateY(-100%);
        }
    }
    .modal-bottom {
        inset-block-start: auto;
        inset-block-end: --spacing(2);
        inline-size: 100%;

        &:not([open], :open) {
            transform: translateY(100%);
        }
    }
}