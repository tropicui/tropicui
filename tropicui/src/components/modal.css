/*
Modal component styles.

@description Provides a flexible, customizable modal dialog component with various sizes and animations. Supports backdrop interactions, static behavior, and dismissible functionality.

@layer components - Applies styles at the component layer of the CSS cascade.

@property {string} --modal-size - Controls the block (vertical) size of the modal
@property {string} --modal-inline - Controls the inline (horizontal) size of the modal
*/
@layer components {
    .modal {
        /* modifiers */
        --modal-size: calc(var(--container-md) / 1.8);
        --modal-inline: calc(var(--modal-size) * 2);

        /* layout */
        display: none;
        flex-direction: column;
        opacity: 0;
        visibility: hidden;
        overflow: hidden;
        margin: auto;

        /* dimensions */
        min-block-size: var(--modal-size);
        inline-size: var(--modal-inline);
        /* reset browser default style */
        max-block-size: calc(100% - 1em);
        max-inline-size: calc(100% - 1em);

        /* colors */
        box-shadow: var(--shadow-high);

        /* animation */
        transition-property: display, opacity, overlay, scale, transform, visibility;
        transition-behavior: allow-discrete;
        transition-duration: var(--tt-duration, var(--default-transition-duration));
        /* transition-duration: 2s; */
        transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));

        &::backdrop {
            background-color: transparent;

            /* animation */
            transition-property: background-color;
            transition-duration: var(--tt-duration, var(--default-transition-duration));
        /* transition-duration: 1s; */
            transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));
        }

        &:is([open], :open) {
            display: flex;
            opacity: 1;
            visibility: visible;

            button:focus-visible {
                background-color: inherit;
            }

            &::backdrop {
                pointer-events: none;
                background-color: color-mix(in oklab, var(--color-black) 40%, transparent );
            }

            @starting-style {
                opacity: 0;
                visibility: hidden;
                scale: 80%;

                &::backdrop {
                    background-color: transparent;
                }

                &:is(
                    .modal-start,
                    .modal-top-start,
                    .modal-bottom-start,
                    .modal-left,
                    .modal-top-left,
                    .modal-bottom-left
                ) {
                    transform: translateX(-100%);
                }
                &:is(
                    .modal-end,
                    .modal-top-end,
                    .modal-bottom-end,
                    .modal-right,
                    .modal-top-right,
                    .modal-bottom-right
                ) {
                    transform: translateX(100%);
                }
                &:is(.modal-top) {
                    transform: translateY(-100%);
                }
                &:is(.modal-bottom) {
                    transform: translateY(100%);
                }
            }
        }

        /* action outside of modal */
        .modal-static,
        .modal-dismiss-backdrop {
            display: grid;
            position: fixed;
            inset-block-start: 0;
            inset-inline-start: 0;
            block-size: 100%;
            inline-size: 100%;
            opacity: 0;
            z-index: -1;
        }
        &:has(.modal-static:active) {
            scale: 105%;
        }

        /* Stacking */
        &:has(.modal:is([open], :open)) {
            scale: 90%;

            &:not(.modal-focus) {
                transform: translateX(calc(--spacing(12) * -1));
            }

            &:is(
                .modal-start,
                .modal-top-start,
                .modal-bottom-start,
                .modal-left,
                .modal-top-left,
                .modal-bottom-left
            ) {
                transform: translateX(calc(--spacing(12) * 1));
            }

            &.modal-focus {
                scale: 95%;
                inset-block-end: auto;

                .modal.modal-focus:is([open], :open) {
                    max-block-size: calc(100% - 2em);
                    inset-block-start: auto;
                    inset-block-end: --spacing(2);
                }
            }
        }
    }

    /* sizes */
    .modal-sm {
        --modal-size: calc(var(--container-sm) / 1.8);
    }
    .modal-lg {
        --modal-size: calc(var(--container-lg) / 1.8);
    }
    .modal-xl {
        --modal-size: calc(var(--container-2xl) / 1.8);
    }
    .modal-2xl {
        --modal-size: calc(var(--container-4xl) / 1.8);
    }
    .modal-focus {
        block-size: 100%;
        inline-size: 100%;
    }

    /* positioning */
    .modal-top {
        inset-block-start: --spacing(2);
        inset-block-end: auto;

        &:not([open], :open) {
            transform: translateY(-100%);
        }
    }
    .modal-bottom {
        inset-block-start: auto;
        inset-block-end: --spacing(2);

        &:not([open], :open) {
            transform: translateY(100%);
        }
    }
    .modal-start {
        inset-inline-start: --spacing(2);
        inset-inline-end: auto;

        &:not([open], :open) {
            transform: translateX(-100%);
        }
    }
    .modal-end {
        inset-inline-start: auto;
        inset-inline-end: --spacing(2);

        &:not([open], :open) {
            transform: translateX(100%);
        }
    }
    .modal-top-start {
        inset-block-start: --spacing(2);
        inset-block-end: auto;
        inset-inline-start: --spacing(2);
        inset-inline-end: auto;

        &:not([open], :open) {
            transform: translateX(-100%);
        }
    }
    .modal-top-end {
        inset-block-start: --spacing(2);
        inset-block-end: auto;
        inset-inline-start: auto;
        inset-inline-end: --spacing(2);

        &:not([open], :open) {
            transform: translateX(100%);
        }
    }
    .modal-bottom-start {
        inset-block-start: auto;
        inset-block-end: --spacing(2);
        inset-inline-start: --spacing(2);
        inset-inline-end: auto;

        &:not([open], :open) {
            transform: translateX(-100%);
        }
    }
    .modal-bottom-end {
        inset-block-start: auto;
        inset-block-end: --spacing(2);
        inset-inline-start: auto;
        inset-inline-end: --spacing(2);

        &:not([open], :open) {
            transform: translateX(100%);
        }
    }
    .modal-left {
        left: --spacing(2);
        right: auto;

        &:not([open], :open) {
            transform: translateX(-100%);
        }
    }
    .modal-right {
        left: auto;
        right: --spacing(2);

        &:not([open], :open) {
            transform: translateX(100%);
        }
    }
    .modal-top-left {
        inset-block-start: --spacing(2);
        inset-block-end: auto;
        left: --spacing(2);
        right: auto;

        &:not([open], :open) {
            transform: translateX(-100%);
        }
    }
    .modal-top-right {
        inset-block-start: --spacing(2);
        inset-block-end: auto;
        left: auto;
        right: --spacing(2);

        &:not([open], :open) {
            transform: translateX(100%);
        }
    }
    .modal-bottom-left {
        inset-block-start: auto;
        inset-block-end: --spacing(2);
        left: --spacing(2);
        right: auto;

        &:not([open], :open) {
            transform: translateX(-100%);
        }
    }
    .modal-bottom-right {
        inset-block-start: auto;
        inset-block-end: --spacing(2);
        left: auto;
        right: --spacing(2);

        &:not([open], :open) {
            transform: translateX(100%);
        }
    }
}