/*
Input component styles.

@description Provides a flexible, customizable input component with various states, sizes, and styles for form inputs with consistent styling. Supports input groups with prefixes, suffixes, and buttons.

@layer components - Applies styles at the component layer of the CSS cascade.

@property {string} --input-bg - Background color of the input
@property {string} --input-border - Border color of the input
@property {string} --input-border-width - Width of the input border
@property {string} --input-focus - Outline color when input is focused
@property {string} --input-text - Text color of the input
@property {string} --input-label - Color of labels and other non-input elements within input groups
@property {string} --input-size - Controls the overall size of the input
@property {string} --input-gap - Spacing between elements within input groups
@property {string} --input-color - Accent color that affects border and outline
@property {string} --btn-radius - Overrides the default button radius
*/
@layer components {
    .input {
        /* modifiers */
        --input-bg: color-mix(in oklab, var(--input-color) 15%, var(--color-base-background));
        --input-border: var(--input-color, var(--color-base-border));
        --input-border-width: var(--border-width);
        --input-focus: color-mix(in oklab, var(--input-color, var(--color-accent)) 40%, transparent);
        --input-text: var(--color-base-foreground);
        --input-label: var(--color-base-dense);
        --input-size: --spacing(10);
        --input-gap: calc(var(--input-size) * 0.4);
        --input-radius: var(--radius-control);

        /* dimensions */
        block-size: var(--input-size);

        /* colors */
        border-width: var(--input-border-width);
        border-style: solid;
        border-color: var(--input-border);
        border-radius: var(--input-radius);
        outline: 0px solid var(--input-focus);
        background-color: var(--input-bg, var(--color-base));
        box-shadow: var(--shadow-low);

        /* animation */
        transition-property: background-color, border-color, box-shadow, color, outline;
        transition-duration: var(--tt-duration, var(--default-transition-duration));
        transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));

        /* input field */
        &:is(input), > input {
            /* layout */
            overflow: hidden;
            inline-size: 100%;

            /* dimensions */
            min-inline-size: var(--input-size);
            padding-inline: var(--input-gap);

            /* typography */
            color: var(--input-text);
            font-size: calc(var(--input-size) * 0.4);
            line-height: 1.25;

            &::placeholder {
                font-style: italic;
                font-weight: var(--font-weight-light);
                color: var(--input-text);
                opacity: .6;
            }

            &:read-only:not(:disabled, [disabled]) {
                background-color: var(--color-base-border);
            }

            &:is([type="file"]) {
                padding-inline-start: 0px;
                &:not(:disabled, [disabled]) {
                    background-color: var(--input-bg, var(--color-base));
                }
            
                &::file-selector-button {
                    block-size: 100%;
                    min-inline-size: var(--input-size);
                    padding-inline: var(--input-gap);
                    margin-inline-end: var(--input-gap);

                    /* color */
                    border-inline-end: var(--input-border-width) solid var(--input-color, var(--color-base-border));
                }

                @media (hover: hover) {
                    &::file-selector-button:hover {
                        background-color: color-mix(in oklab, var(--input-bg), var(--color-black) 6%);
                    }
                }

                &::file-selector-button:active {
                    background-color: color-mix(in oklab, var(--input-bg), var(--color-black) 12%);
                }
            }
        }

        /* disabled */
        &:is(:disabled, [disabled]),
        &:has(:disabled, [disabled]) {
            cursor: not-allowed;

            /* colors */
            background-color: var(--color-base-border);
            box-shadow: none;

            input {
                cursor: not-allowed;
            }
        }

        /* focus */
        &:not(.input-nofocus):focus-visible,
        &:not(.input-nofocus):has(:focus-visible) {
            outline-width: 3px;

            &:not(.input-solid) {
                --input-text: var(--color-base-foreground);

                border-color: var(--input-color, var(--color-accent));
                background-color: color-mix(in oklab, var(--input-bg, var(--color-base)), var(--color-base-background) 80%);
            }
        }

        /* validation */
        &.input-validate:user-invalid,
        &.input-validate:has(:user-invalid),
        &.input-invalid,
        &:has(.input-invalid) {
            --input-color: var(--color-danger);

            outline-width: 3px;
            outline-style: solid;
        }

        /* input group */
        &:not(input) {
            display: flex;
            align-items: center;

            > input {
                flex: 1;
                outline-width: 0;
                block-size: 100%;

                & ~ .btn {
                    border-inline-start: var(--input-border-width) solid var(--input-border);
                }
            }

            /* label */
            > :where(:not(input, .btn, .dropdown, .input-prefix, .input-suffix)) {
                padding-inline: var(--input-gap) --spacing(0);

                /* typography */
                color: var(--input-label);
                font-size: calc(var(--input-size) * 0.4);
                -webkit-user-select: none;
                user-select: none;

                &:last-child {
                    padding-inline: --spacing(0) var(--input-gap);
                }
            }

            /* button */
            > .btn,
            > .dropdown,
            > .dropdown > .btn {
                block-size: 100%;
                min-inline-size: var(--input-size);
                border: none;
                border-radius: 0;
                box-shadow: none;

                &:has(~ input) {
                    border-inline-end: var(--input-border-width) solid var(--input-border);
                }
            }

            > :is(:first-child) {
                border-start-start-radius: calc(var(--input-radius) - var(--input-border-width));
                border-end-start-radius: calc(var(--input-radius) - var(--input-border-width));
            }
            > :is(:last-child) {
                border-start-end-radius: calc(var(--input-radius) - var(--input-border-width));
                border-end-end-radius: calc(var(--input-radius) - var(--input-border-width));
            }
        }

        :where(svg, img, i) {
            flex: none;
            block-size: 1.25em;

            .btn & {
                width: auto;
                min-width: auto;
            }
        }

        &:has(.input-prefix, .input-suffix) {
            .input-prefix, .input-suffix {
                /* layout */
                display: inline-flex;
                align-items: center;
                justify-content: center;

                /* dimensions */
                block-size: 100%;
                min-inline-size: var(--input-size);
                padding-inline: --spacing(2);

                /* colours */
                background-color: var(--input-bg, var(--color-base-airy));
                color: var(--input-color, currentColor);

                .input-solid & {
                    color: var(--input-text, currentColor);
                }
            }

            .input-prefix {
                border-inline-end: var(--input-border-width) solid var(--input-border);
            }
    
            .input-suffix {
                border-inline-start: var(--input-border-width) solid var(--input-border);
            }
        }
    }

    /* variations */
    .input-clear {
        /* colors */
        border: none;
        box-shadow: none;
        background: none;
    }

    .input-solid {
        --input-bg: var(--input-color, var(--color-base));

        /* colors */
        border: none;
        box-shadow: none;
    }

    .input.input-outline,
    .input.input-outline-bold {
        /* colors */
        background: none;
        box-shadow: none;
    }

    .input-outline-bold {
        border-width: calc(var(--input-border-width) * 2);
    }

    /* colors */
    .input-primary {
        --input-color: var(--color-primary);

        &.input-solid {
            --input-text: var(--color-primary-content);
        }
    }
    .input-accent {
        --input-color: var(--color-accent);

        &.input-solid {
            --input-text: var(--color-accent-content);
        }
    }
    .input-success {
        --input-color: var(--color-success);

        &.input-solid {
            --input-text: var(--color-success-content);
        }
    }
    .input-warning {
        --input-color: var(--color-warning);

        &.input-solid {
            --input-text: var(--color-warning-content);
        }
    }
    .input-danger {
        --input-color: var(--color-danger);

        &.input-solid {
            --input-text: var(--color-danger-content);
        }
    }

    /* sizes */
    .input-xs {
        --input-size: --spacing(8);
    }

    .input-sm {
        --input-size: --spacing(9);
    }

    .input-lg {
        --input-size: --spacing(11);
    }

    .input-xl {
        --input-size: --spacing(12);
    }

    .input-2xl {
        --input-size: --spacing(13);
    }
}