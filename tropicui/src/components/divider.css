/*
Divider component styles.

@description Provides a flexible, customizable divider component for separating content sections with optional text labels and various styling options.

@layer components - Applies styles at the component layer of the CSS cascade.

@property {string} --divider-border - Color of the divider line
@property {string} --divider-color - Base color that influences the divider appearance
@property {string} --divider-color-modifier - Modifier that can adjust the divider color
@property {string} --divider-width - Thickness of the divider line
@property {string} --divider-start - Width/height of the divider before content
@property {string} --divider-end - Width/height of the divider after content
*/
@layer components {
    .divider {
        /* modifiers */
        --divider-border: var(--divider-color-modifier, var(--divider-color, var(--color-base-border)));
        --divider-width: 1px;
        --divider-start: 100%;
        --divider-end: 100%;

        /* layout */
        display: flex;
        flex-direction: row;
        align-items: center;
        white-space: nowrap;

        color: var(--divider-color, var(--color-base-foreground));

        /* bar */
        &::before,
        &::after {
            content: '';
            border-block-end-width: var(--divider-width);
            border-color: var(--divider-border);
            block-size: --spacing(0.25);
            inline-size: 100%;
        }
        &:not(:empty) {
            gap: --spacing(4);
        }
        &::before {
            width: var(--divider-start);
        }
        &::after {
            width: var(--divider-end);
        }
    }

    /* direction */
    .divider-vertical {
        &.divider {
            flex-direction: column;
            block-size: 100%;
            &::before,
            &::after {
                border-inline-start-width: var(--divider-width);
                block-size: 100%;
                inline-size: --spacing(0.25);
            }
            &::before {
                block-size: var(--divider-start);
            }
            &::after {
                block-size: var(--divider-end);
            }
        }
    }

    /* variants */
    .divider-dashed {
        &::before,
        &::after {
            border-style: dashed;
        }
    }
    .divider-dotted {
        &::before,
        &::after {
            border-style: dotted;
        }
    }
    .divider-solid {
        &::before,
        &::after {
            border-style: solid;
        }
    }

    /* colors */
    .divider-primary {
        --divider-color: var(--color-primary);
    }
    .divider-accent {
        --divider-color: var(--color-accent);
    }
    .divider-success {
        --divider-color: var(--color-success);
    }
    .divider-warning {
        --divider-color: var(--color-warning);
    }
    .divider-danger {
        --divider-color: var(--color-danger);
    }
    .divider-subtle {
        --divider-color-modifier: color-mix(in oklch, var(--divider-color, var(--color-base-border)) 20%, transparent);
    }

    /* content positioning */
    .divider-start {
        --divider-start: calc(var(--spacing) * 10);
    }
    .divider-end {
        --divider-end: calc(var(--spacing) * 10);
    }
    .divider-start-0 {
        &::before {
            content: none;
        }
    }
    .divider-end-0 {
        &::after {
            content: none;
        }
    }
}

@utility divider-start-* {
    --divider-start: --value([*]);
    --divider-start: calc(var(--spacing) * --value(integer));
}

@utility divider-end-* {
    --divider-end: --value([*]);
    --divider-end: calc(var(--spacing) * --value(integer));
}

@utility divider-* {
    --divider-width: --value(integer)px;
}