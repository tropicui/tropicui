/*
Card component styles.

@description Provides a flexible, customizable card component for displaying content in a contained box with consistent styling for headers, bodies, and footers.

@layer components - Applies styles at the component layer of the CSS cascade.

@property {string} --card-bg - Background color of the card
@property {string} --card-header-bg - Background color of the card header
@property {string} --card-footer-bg - Background color of the card footer
@property {string} --card-border - Border color of the card
@property {string} --card-border-width - Width of the card border
@property {string} --card-radius - The rounded corner radius of the card
@property {string} --card-header-size - Height of the card header
@property {string} --card-footer-size - Height of the card footer
*/
@layer components {
    .card {
        /* modifiers */
        --card-bg: var(--color-base-background);
        --card-header-bg: var(--color-base);
        --card-footer-bg: var(--color-base);
        --card-border: var(--color-base-border);
        --card-border-width: 0px;
        --card-radius: var(--radius-container);
        --card-shadow: var(--shadow-low);
        --card-header-size: --spacing(14);
        --card-footer-size: --spacing(16);

        --join-border-width: var(--card-border-width);

        /* colors */
        background-color: var(--card-bg);
        border: var(--card-border-width) solid var(--card-border);
        border-radius: var(--card-radius);
        box-shadow: var(--card-shadow);
        color: var(--color-base-foreground);

        /* animation */
        transition-property: background-color, border-color, box-shadow, color;
        transition-duration: var(--tt-duration, var(--default-transition-duration));
        transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));

        /* children border radius */
        & > *:is(:first-child):not(:last-child) {
            border-start-start-radius: calc(var(--card-radius) - var(--card-border-width));
            border-start-end-radius: calc(var(--card-radius) - var(--card-border-width));
        }

        & > *:is(:last-child):not(:first-child) {
            border-end-start-radius: calc(var(--card-radius) - var(--card-border-width));
            border-end-end-radius: calc(var(--card-radius) - var(--card-border-width));
        }

        & > *:is(:only-child) {
            border-radius: calc(var(--card-radius) - var(--card-border-width));
        }

        &.card-border {
            --card-border-width: var(--border-width);
        }

        &.card-gutter {
            margin-block-end: --spacing(8);
        }

        &.card-scroll {
            display: flex;
            flex-direction: column;

            .card-body {
                overflow: auto;
            }
        }

        &.card-flat {
            --card-radius: 0;
            --card-shadow: none;
        }

        .card-title {
            display: flex;
            flex-wrap: wrap;
            align-items: baseline;
            gap: --spacing(2);
        }

        .card-header {
            /* layout */
            position: relative;
            display: flex;
            align-items: center;
            gap: --spacing(4);

            /* dimensions */
            min-block-size: var(--card-header-size);
            padding: --spacing(4);

            /* colors */
            border-block-end: 1px solid var(--card-border);
            background-color: var(--card-header-bg);

            /* animation */
            transition-property: background-color, border-color, box-shadow, color;
            transition-duration: var(--tt-duration, var(--default-transition-duration));
            transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));

            &.card-sticky {
                position: sticky;
                inset-block-start: 0;
                z-index: 10;
            }

            h1, h2, h3, h4, h5, h6 {
                margin-block: 0;
            }
        }

        /* card image */
        figure {
            position: relative;
            overflow: hidden;

            img {
                display: block;
                width: 100%;
                height: 100%;
                object-fit: cover;
            }
        }

        .card-body {
            flex: 1;
            padding-block-start: --spacing(4);
            padding-block-end: --spacing(8);
            padding-inline: --spacing(6);
        }

        .card-footer {
            /* layout */
            position: relative;
            display: flex;
            align-items: center;
            gap: --spacing(4);

            /* dimensions */
            min-block-size: var(--card-footer-size);
            padding-inline: --spacing(4);

            /* colors */
            border-block-start: 1px solid var(--card-border);
            background-color: var(--card-footer-bg);

            /* animation */
            transition-property: background-color, border-color, box-shadow, color;
            transition-duration: var(--tt-duration, var(--default-transition-duration));
            transition-timing-function: var(--tt-ease-out, var(--default-transition-timing-function));

            &.card-sticky {
                position: sticky;
                inset-block-end: 0;
                z-index: 10;
            }
        }

        /* center content */
        .card-center {
            display: grid;
            place-items: center;
        }

        > :where(.alert) {
            border-radius: 0;
            box-shadow: none;
        }
    }

    .card-actions {
        .card & {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: --spacing(4);
        }

        .card :is(.card-header, .card-footer) & {
            position: absolute;
            inset-inline: 0;
            inset-block-start: 0;
                z-index: 1;

            inline-size: 100%;
            block-size: 100%;

            padding-inline: --spacing(4);
        }
    }

    /* icons */
    svg, img, i {
        .card :is(.card-header, .card-footer) & {
            block-size: 1.25em;
            min-inline-size: 1.25em;
        }
    }
}