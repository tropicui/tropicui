/*
Card component styles.

@description Provides a flexible, customizable card component for displaying content in a contained box with consistent styling for headers, bodies, and footers.

@layer components - Applies styles at the component layer of the CSS cascade.

@property {string} --card-bg - Background color of the card
@property {string} --card-header-bg - Background color of the card header
@property {string} --card-footer-bg - Background color of the card footer
@property {string} --card-border - Border color of the card
@property {string} --card-border-width - Width of the card border
@property {string} --card-radius - The rounded corner radius of the card
@property {string} --card-header-size - Height of the card header
@property {string} --card-footer-size - Height of the card footer
*/
@layer components {
    .card {
        /* modifiers */
        --card-bg: var(--color-base-background);
        --card-header-bg: var(--color-base-background);
        --card-footer-bg: var(--color-base-background);
        --card-border: var(--color-base-border);
        --card-border-width: 0px;
        --card-radius: var(--radius-container);
        --card-header-size: --spacing(14);
        --card-footer-size: --spacing(16);

        /* colors */
        background-color: var(--card-bg);
        border: var(--card-border-width) solid var(--card-border);
        border-radius: var(--card-radius);
        box-shadow: var(--shadow-low);
        color: var(--color-base-foreground);

        /* children border radius */
        & > *:is(:first-child):not(:last-child) {
            border-start-start-radius: calc(var(--card-radius) - var(--card-border-width));
            border-start-end-radius: calc(var(--card-radius) - var(--card-border-width));
        }

        & > *:is(:last-child):not(:first-child) {
            border-end-start-radius: calc(var(--card-radius) - var(--card-border-width));
            border-end-end-radius: calc(var(--card-radius) - var(--card-border-width));
        }

        & > *:is(:only-child) {
            border-radius: calc(var(--card-radius) - var(--card-border-width));
        }

        &.card-border {
            --card-border-width: 1px;
        }

        &.card-gutter {
            margin-block-end: --spacing(8);
        }

        .card-header {
            /* layout */
            display: flex;
            align-items: center;
            gap: --spacing(4);

            /* dimensions */
            min-block-size: var(--card-header-size);
            padding-block: --spacing(4);
            padding-inline: --spacing(6);

            /* colors */
            border-block-end: 1px solid var(--card-border);
            background-color: var(--card-header-bg);

            &.card-sticky {
                position: sticky;
                inset-block-start: 0;
                z-index: 10;
            }

            .card-title {
                display: flex;
                align-items: baseline;
                gap: --spacing(2);
            }
        }

        /* card image */
        .card-figure {
            overflow: hidden;
        }

        .card-body {
            padding-block-start: --spacing(4);
            padding-block-end: --spacing(8);
            padding-inline: --spacing(6);
        }

        .card-actions {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            gap: --spacing(4);
        }

        .card-footer {
            /* layout */
            display: flex;
            align-items: center;
            gap: --spacing(4);

            /* dimensions */
            min-block-size: var(--card-footer-size);
            padding-block: --spacing(4);
            padding-inline: --spacing(6);

            /* colors */
            border-block-start: 1px solid var(--card-border);
            background-color: var(--card-footer-bg);

            &.card-sticky {
                position: sticky;
                inset-block-end: 0;
                z-index: 10;
            }
        }

        :where(.alert) {
            border-radius: 0;
            box-shadow: none;
        }
    }

    .card-group {
        display: flex;

        .card:is(:first-child) {
            &, > * {
                border-start-end-radius: 0;
                border-end-end-radius: 0;
            }
        }
        .card:is(:last-child) {
            &, > * {
                border-start-start-radius: 0;
                border-end-start-radius: 0;
            }
        }
        .card:not(:first-child,:last-child) {
            &, > * {
                border-radius: 0;
            }
        }
    }
}